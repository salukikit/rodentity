// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/salukikit/rodentity/ent/operator"
	"github.com/salukikit/rodentity/ent/project"
	"github.com/salukikit/rodentity/ent/task"
)

// OperatorCreate is the builder for creating a Operator entity.
type OperatorCreate struct {
	config
	mutation *OperatorMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (oc *OperatorCreate) SetUsername(s string) *OperatorCreate {
	oc.mutation.SetUsername(s)
	return oc
}

// SetPrivkey sets the "privkey" field.
func (oc *OperatorCreate) SetPrivkey(b []byte) *OperatorCreate {
	oc.mutation.SetPrivkey(b)
	return oc
}

// SetCert sets the "cert" field.
func (oc *OperatorCreate) SetCert(b []byte) *OperatorCreate {
	oc.mutation.SetCert(b)
	return oc
}

// SetID sets the "id" field.
func (oc *OperatorCreate) SetID(x xid.ID) *OperatorCreate {
	oc.mutation.SetID(x)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *OperatorCreate) SetNillableID(x *xid.ID) *OperatorCreate {
	if x != nil {
		oc.SetID(*x)
	}
	return oc
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (oc *OperatorCreate) AddProjectIDs(ids ...xid.ID) *OperatorCreate {
	oc.mutation.AddProjectIDs(ids...)
	return oc
}

// AddProjects adds the "projects" edges to the Project entity.
func (oc *OperatorCreate) AddProjects(p ...*Project) *OperatorCreate {
	ids := make([]xid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return oc.AddProjectIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (oc *OperatorCreate) AddTaskIDs(ids ...xid.ID) *OperatorCreate {
	oc.mutation.AddTaskIDs(ids...)
	return oc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (oc *OperatorCreate) AddTasks(t ...*Task) *OperatorCreate {
	ids := make([]xid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return oc.AddTaskIDs(ids...)
}

// Mutation returns the OperatorMutation object of the builder.
func (oc *OperatorCreate) Mutation() *OperatorMutation {
	return oc.mutation
}

// Save creates the Operator in the database.
func (oc *OperatorCreate) Save(ctx context.Context) (*Operator, error) {
	oc.defaults()
	return withHooks[*Operator, OperatorMutation](ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OperatorCreate) SaveX(ctx context.Context) *Operator {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OperatorCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OperatorCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OperatorCreate) defaults() {
	if _, ok := oc.mutation.ID(); !ok {
		v := operator.DefaultID()
		oc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OperatorCreate) check() error {
	if _, ok := oc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "Operator.username"`)}
	}
	return nil
}

func (oc *OperatorCreate) sqlSave(ctx context.Context) (*Operator, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OperatorCreate) createSpec() (*Operator, *sqlgraph.CreateSpec) {
	var (
		_node = &Operator{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(operator.Table, sqlgraph.NewFieldSpec(operator.FieldID, field.TypeString))
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oc.mutation.Username(); ok {
		_spec.SetField(operator.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := oc.mutation.Privkey(); ok {
		_spec.SetField(operator.FieldPrivkey, field.TypeBytes, value)
		_node.Privkey = value
	}
	if value, ok := oc.mutation.Cert(); ok {
		_spec.SetField(operator.FieldCert, field.TypeBytes, value)
		_node.Cert = value
	}
	if nodes := oc.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   operator.ProjectsTable,
			Columns: operator.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.TasksTable,
			Columns: []string{operator.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OperatorCreateBulk is the builder for creating many Operator entities in bulk.
type OperatorCreateBulk struct {
	config
	builders []*OperatorCreate
}

// Save creates the Operator entities in the database.
func (ocb *OperatorCreateBulk) Save(ctx context.Context) ([]*Operator, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Operator, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OperatorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OperatorCreateBulk) SaveX(ctx context.Context) []*Operator {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OperatorCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OperatorCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
