// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/salukikit/rodentity/ent/loot"
	"github.com/salukikit/rodentity/ent/operator"
	"github.com/salukikit/rodentity/ent/rodent"
	"github.com/salukikit/rodentity/ent/task"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (tc *TaskCreate) SetType(s string) *TaskCreate {
	tc.mutation.SetType(s)
	return tc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tc *TaskCreate) SetNillableType(s *string) *TaskCreate {
	if s != nil {
		tc.SetType(*s)
	}
	return tc
}

// SetArgs sets the "args" field.
func (tc *TaskCreate) SetArgs(s []string) *TaskCreate {
	tc.mutation.SetArgs(s)
	return tc
}

// SetData sets the "data" field.
func (tc *TaskCreate) SetData(b []byte) *TaskCreate {
	tc.mutation.SetData(b)
	return tc
}

// SetResult sets the "result" field.
func (tc *TaskCreate) SetResult(b []byte) *TaskCreate {
	tc.mutation.SetResult(b)
	return tc
}

// SetExecuted sets the "Executed" field.
func (tc *TaskCreate) SetExecuted(b bool) *TaskCreate {
	tc.mutation.SetExecuted(b)
	return tc
}

// SetNillableExecuted sets the "Executed" field if the given value is not nil.
func (tc *TaskCreate) SetNillableExecuted(b *bool) *TaskCreate {
	if b != nil {
		tc.SetExecuted(*b)
	}
	return tc
}

// SetLooted sets the "looted" field.
func (tc *TaskCreate) SetLooted(b bool) *TaskCreate {
	tc.mutation.SetLooted(b)
	return tc
}

// SetNillableLooted sets the "looted" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLooted(b *bool) *TaskCreate {
	if b != nil {
		tc.SetLooted(*b)
	}
	return tc
}

// SetRequestedat sets the "requestedat" field.
func (tc *TaskCreate) SetRequestedat(t time.Time) *TaskCreate {
	tc.mutation.SetRequestedat(t)
	return tc
}

// SetCompletedat sets the "completedat" field.
func (tc *TaskCreate) SetCompletedat(t time.Time) *TaskCreate {
	tc.mutation.SetCompletedat(t)
	return tc
}

// SetNillableCompletedat sets the "completedat" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCompletedat(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetCompletedat(*t)
	}
	return tc
}

// SetTTPs sets the "TTPs" field.
func (tc *TaskCreate) SetTTPs(s []string) *TaskCreate {
	tc.mutation.SetTTPs(s)
	return tc
}

// SetRodentID sets the "rodent" edge to the Rodent entity by ID.
func (tc *TaskCreate) SetRodentID(id int) *TaskCreate {
	tc.mutation.SetRodentID(id)
	return tc
}

// SetNillableRodentID sets the "rodent" edge to the Rodent entity by ID if the given value is not nil.
func (tc *TaskCreate) SetNillableRodentID(id *int) *TaskCreate {
	if id != nil {
		tc = tc.SetRodentID(*id)
	}
	return tc
}

// SetRodent sets the "rodent" edge to the Rodent entity.
func (tc *TaskCreate) SetRodent(r *Rodent) *TaskCreate {
	return tc.SetRodentID(r.ID)
}

// SetOperatorID sets the "operator" edge to the Operator entity by ID.
func (tc *TaskCreate) SetOperatorID(id int) *TaskCreate {
	tc.mutation.SetOperatorID(id)
	return tc
}

// SetNillableOperatorID sets the "operator" edge to the Operator entity by ID if the given value is not nil.
func (tc *TaskCreate) SetNillableOperatorID(id *int) *TaskCreate {
	if id != nil {
		tc = tc.SetOperatorID(*id)
	}
	return tc
}

// SetOperator sets the "operator" edge to the Operator entity.
func (tc *TaskCreate) SetOperator(o *Operator) *TaskCreate {
	return tc.SetOperatorID(o.ID)
}

// AddLootIDs adds the "loot" edge to the Loot entity by IDs.
func (tc *TaskCreate) AddLootIDs(ids ...int) *TaskCreate {
	tc.mutation.AddLootIDs(ids...)
	return tc
}

// AddLoot adds the "loot" edges to the Loot entity.
func (tc *TaskCreate) AddLoot(l ...*Loot) *TaskCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tc.AddLootIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	tc.defaults()
	return withHooks[*Task, TaskMutation](ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() {
	if _, ok := tc.mutation.GetType(); !ok {
		v := task.DefaultType
		tc.mutation.SetType(v)
	}
	if _, ok := tc.mutation.Executed(); !ok {
		v := task.DefaultExecuted
		tc.mutation.SetExecuted(v)
	}
	if _, ok := tc.mutation.Looted(); !ok {
		v := task.DefaultLooted
		tc.mutation.SetLooted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Task.type"`)}
	}
	if _, ok := tc.mutation.Executed(); !ok {
		return &ValidationError{Name: "Executed", err: errors.New(`ent: missing required field "Task.Executed"`)}
	}
	if _, ok := tc.mutation.Looted(); !ok {
		return &ValidationError{Name: "looted", err: errors.New(`ent: missing required field "Task.looted"`)}
	}
	if _, ok := tc.mutation.Requestedat(); !ok {
		return &ValidationError{Name: "requestedat", err: errors.New(`ent: missing required field "Task.requestedat"`)}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.Args(); ok {
		_spec.SetField(task.FieldArgs, field.TypeJSON, value)
		_node.Args = value
	}
	if value, ok := tc.mutation.Data(); ok {
		_spec.SetField(task.FieldData, field.TypeBytes, value)
		_node.Data = value
	}
	if value, ok := tc.mutation.Result(); ok {
		_spec.SetField(task.FieldResult, field.TypeBytes, value)
		_node.Result = value
	}
	if value, ok := tc.mutation.Executed(); ok {
		_spec.SetField(task.FieldExecuted, field.TypeBool, value)
		_node.Executed = value
	}
	if value, ok := tc.mutation.Looted(); ok {
		_spec.SetField(task.FieldLooted, field.TypeBool, value)
		_node.Looted = value
	}
	if value, ok := tc.mutation.Requestedat(); ok {
		_spec.SetField(task.FieldRequestedat, field.TypeTime, value)
		_node.Requestedat = value
	}
	if value, ok := tc.mutation.Completedat(); ok {
		_spec.SetField(task.FieldCompletedat, field.TypeTime, value)
		_node.Completedat = value
	}
	if value, ok := tc.mutation.TTPs(); ok {
		_spec.SetField(task.FieldTTPs, field.TypeJSON, value)
		_node.TTPs = value
	}
	if nodes := tc.mutation.RodentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.RodentTable,
			Columns: []string{task.RodentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rodent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.rodent_tasks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.OperatorTable,
			Columns: []string{task.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: operator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.operator_tasks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.LootIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.LootTable,
			Columns: []string{task.LootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: loot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	builders []*TaskCreate
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
