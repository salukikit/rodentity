// Code generated by ent, DO NOT EDIT.

package domain

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
	"github.com/salukikit/rodentity/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldName, v))
}

// AD applies equality check predicate on the "AD" field. It's identical to ADEQ.
func AD(v bool) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldAD, v))
}

// Owned applies equality check predicate on the "owned" field. It's identical to OwnedEQ.
func Owned(v bool) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldOwned, v))
}

// Cloud applies equality check predicate on the "cloud" field. It's identical to CloudEQ.
func Cloud(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldCloud, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldName, v))
}

// ADEQ applies the EQ predicate on the "AD" field.
func ADEQ(v bool) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldAD, v))
}

// ADNEQ applies the NEQ predicate on the "AD" field.
func ADNEQ(v bool) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldAD, v))
}

// OwnedEQ applies the EQ predicate on the "owned" field.
func OwnedEQ(v bool) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldOwned, v))
}

// OwnedNEQ applies the NEQ predicate on the "owned" field.
func OwnedNEQ(v bool) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldOwned, v))
}

// CloudEQ applies the EQ predicate on the "cloud" field.
func CloudEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEQ(FieldCloud, v))
}

// CloudNEQ applies the NEQ predicate on the "cloud" field.
func CloudNEQ(v string) predicate.Domain {
	return predicate.Domain(sql.FieldNEQ(FieldCloud, v))
}

// CloudIn applies the In predicate on the "cloud" field.
func CloudIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldIn(FieldCloud, vs...))
}

// CloudNotIn applies the NotIn predicate on the "cloud" field.
func CloudNotIn(vs ...string) predicate.Domain {
	return predicate.Domain(sql.FieldNotIn(FieldCloud, vs...))
}

// CloudGT applies the GT predicate on the "cloud" field.
func CloudGT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGT(FieldCloud, v))
}

// CloudGTE applies the GTE predicate on the "cloud" field.
func CloudGTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldGTE(FieldCloud, v))
}

// CloudLT applies the LT predicate on the "cloud" field.
func CloudLT(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLT(FieldCloud, v))
}

// CloudLTE applies the LTE predicate on the "cloud" field.
func CloudLTE(v string) predicate.Domain {
	return predicate.Domain(sql.FieldLTE(FieldCloud, v))
}

// CloudContains applies the Contains predicate on the "cloud" field.
func CloudContains(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContains(FieldCloud, v))
}

// CloudHasPrefix applies the HasPrefix predicate on the "cloud" field.
func CloudHasPrefix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasPrefix(FieldCloud, v))
}

// CloudHasSuffix applies the HasSuffix predicate on the "cloud" field.
func CloudHasSuffix(v string) predicate.Domain {
	return predicate.Domain(sql.FieldHasSuffix(FieldCloud, v))
}

// CloudEqualFold applies the EqualFold predicate on the "cloud" field.
func CloudEqualFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldEqualFold(FieldCloud, v))
}

// CloudContainsFold applies the ContainsFold predicate on the "cloud" field.
func CloudContainsFold(v string) predicate.Domain {
	return predicate.Domain(sql.FieldContainsFold(FieldCloud, v))
}

// HasDevices applies the HasEdge predicate on the "devices" edge.
func HasDevices() predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DevicesTable, DevicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDevicesWith applies the HasEdge predicate on the "devices" edge with a given conditions (other predicates).
func HasDevicesWith(preds ...predicate.Device) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DevicesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DevicesTable, DevicesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroups applies the HasEdge predicate on the "groups" edge.
func HasGroups() predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GroupsTable, GroupsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupsWith applies the HasEdge predicate on the "groups" edge with a given conditions (other predicates).
func HasGroupsWith(preds ...predicate.Group) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GroupsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GroupsTable, GroupsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChilddomains applies the HasEdge predicate on the "childdomains" edge.
func HasChilddomains() predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChilddomainsTable, ChilddomainsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChilddomainsWith applies the HasEdge predicate on the "childdomains" edge with a given conditions (other predicates).
func HasChilddomainsWith(preds ...predicate.Domain) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChilddomainsTable, ChilddomainsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParentdomain applies the HasEdge predicate on the "parentdomain" edge.
func HasParentdomain() predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentdomainTable, ParentdomainColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentdomainWith applies the HasEdge predicate on the "parentdomain" edge with a given conditions (other predicates).
func HasParentdomainWith(preds ...predicate.Domain) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentdomainTable, ParentdomainColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Domain) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Domain) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Domain) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		p(s.Not())
	})
}
