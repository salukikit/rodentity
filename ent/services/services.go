// Code generated by ent, DO NOT EDIT.

package services

const (
	// Label holds the string label denoting the services type in the database.
	Label = "services"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldServiceName holds the string denoting the service_name field in the database.
	FieldServiceName = "service_name"
	// FieldPort holds the string denoting the port field in the database.
	FieldPort = "port"
	// EdgeDevices holds the string denoting the devices edge name in mutations.
	EdgeDevices = "devices"
	// EdgeSubnet holds the string denoting the subnet edge name in mutations.
	EdgeSubnet = "subnet"
	// Table holds the table name of the services in the database.
	Table = "services"
	// DevicesTable is the table that holds the devices relation/edge. The primary key declared below.
	DevicesTable = "services_devices"
	// DevicesInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DevicesInverseTable = "devices"
	// SubnetTable is the table that holds the subnet relation/edge.
	SubnetTable = "subnets"
	// SubnetInverseTable is the table name for the Subnet entity.
	// It exists in this package in order to avoid circular dependency with the "subnet" package.
	SubnetInverseTable = "subnets"
	// SubnetColumn is the table column denoting the subnet relation/edge.
	SubnetColumn = "services_subnet"
)

// Columns holds all SQL columns for services fields.
var Columns = []string{
	FieldID,
	FieldServiceName,
	FieldPort,
}

var (
	// DevicesPrimaryKey and DevicesColumn2 are the table columns denoting the
	// primary key for the devices relation (M2M).
	DevicesPrimaryKey = []string{"services_id", "device_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
