// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/salukikit/rodentity/ent/predicate"
	"github.com/salukikit/rodentity/ent/project"
	"github.com/salukikit/rodentity/ent/rodent"
	"github.com/salukikit/rodentity/ent/router"
)

// RouterUpdate is the builder for updating Router entities.
type RouterUpdate struct {
	config
	hooks    []Hook
	mutation *RouterMutation
}

// Where appends a list predicates to the RouterUpdate builder.
func (ru *RouterUpdate) Where(ps ...predicate.Router) *RouterUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetRname sets the "rname" field.
func (ru *RouterUpdate) SetRname(s string) *RouterUpdate {
	ru.mutation.SetRname(s)
	return ru
}

// SetPrivkey sets the "privkey" field.
func (ru *RouterUpdate) SetPrivkey(b []byte) *RouterUpdate {
	ru.mutation.SetPrivkey(b)
	return ru
}

// SetCert sets the "cert" field.
func (ru *RouterUpdate) SetCert(b []byte) *RouterUpdate {
	ru.mutation.SetCert(b)
	return ru
}

// SetCommands sets the "commands" field.
func (ru *RouterUpdate) SetCommands(s []string) *RouterUpdate {
	ru.mutation.SetCommands(s)
	return ru
}

// AppendCommands appends s to the "commands" field.
func (ru *RouterUpdate) AppendCommands(s []string) *RouterUpdate {
	ru.mutation.AppendCommands(s)
	return ru
}

// ClearCommands clears the value of the "commands" field.
func (ru *RouterUpdate) ClearCommands() *RouterUpdate {
	ru.mutation.ClearCommands()
	return ru
}

// SetInterfaces sets the "interfaces" field.
func (ru *RouterUpdate) SetInterfaces(s []string) *RouterUpdate {
	ru.mutation.SetInterfaces(s)
	return ru
}

// AppendInterfaces appends s to the "interfaces" field.
func (ru *RouterUpdate) AppendInterfaces(s []string) *RouterUpdate {
	ru.mutation.AppendInterfaces(s)
	return ru
}

// ClearInterfaces clears the value of the "interfaces" field.
func (ru *RouterUpdate) ClearInterfaces() *RouterUpdate {
	ru.mutation.ClearInterfaces()
	return ru
}

// AddRodentIDs adds the "rodents" edge to the Rodent entity by IDs.
func (ru *RouterUpdate) AddRodentIDs(ids ...xid.ID) *RouterUpdate {
	ru.mutation.AddRodentIDs(ids...)
	return ru
}

// AddRodents adds the "rodents" edges to the Rodent entity.
func (ru *RouterUpdate) AddRodents(r ...*Rodent) *RouterUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddRodentIDs(ids...)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (ru *RouterUpdate) SetProjectID(id xid.ID) *RouterUpdate {
	ru.mutation.SetProjectID(id)
	return ru
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (ru *RouterUpdate) SetNillableProjectID(id *xid.ID) *RouterUpdate {
	if id != nil {
		ru = ru.SetProjectID(*id)
	}
	return ru
}

// SetProject sets the "project" edge to the Project entity.
func (ru *RouterUpdate) SetProject(p *Project) *RouterUpdate {
	return ru.SetProjectID(p.ID)
}

// Mutation returns the RouterMutation object of the builder.
func (ru *RouterUpdate) Mutation() *RouterMutation {
	return ru.mutation
}

// ClearRodents clears all "rodents" edges to the Rodent entity.
func (ru *RouterUpdate) ClearRodents() *RouterUpdate {
	ru.mutation.ClearRodents()
	return ru
}

// RemoveRodentIDs removes the "rodents" edge to Rodent entities by IDs.
func (ru *RouterUpdate) RemoveRodentIDs(ids ...xid.ID) *RouterUpdate {
	ru.mutation.RemoveRodentIDs(ids...)
	return ru
}

// RemoveRodents removes "rodents" edges to Rodent entities.
func (ru *RouterUpdate) RemoveRodents(r ...*Rodent) *RouterUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveRodentIDs(ids...)
}

// ClearProject clears the "project" edge to the Project entity.
func (ru *RouterUpdate) ClearProject() *RouterUpdate {
	ru.mutation.ClearProject()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RouterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, RouterMutation](ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RouterUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RouterUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RouterUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RouterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(router.Table, router.Columns, sqlgraph.NewFieldSpec(router.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Rname(); ok {
		_spec.SetField(router.FieldRname, field.TypeString, value)
	}
	if value, ok := ru.mutation.Privkey(); ok {
		_spec.SetField(router.FieldPrivkey, field.TypeBytes, value)
	}
	if value, ok := ru.mutation.Cert(); ok {
		_spec.SetField(router.FieldCert, field.TypeBytes, value)
	}
	if value, ok := ru.mutation.Commands(); ok {
		_spec.SetField(router.FieldCommands, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedCommands(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, router.FieldCommands, value)
		})
	}
	if ru.mutation.CommandsCleared() {
		_spec.ClearField(router.FieldCommands, field.TypeJSON)
	}
	if value, ok := ru.mutation.Interfaces(); ok {
		_spec.SetField(router.FieldInterfaces, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedInterfaces(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, router.FieldInterfaces, value)
		})
	}
	if ru.mutation.InterfacesCleared() {
		_spec.ClearField(router.FieldInterfaces, field.TypeJSON)
	}
	if ru.mutation.RodentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   router.RodentsTable,
			Columns: router.RodentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: rodent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRodentsIDs(); len(nodes) > 0 && !ru.mutation.RodentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   router.RodentsTable,
			Columns: router.RodentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: rodent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RodentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   router.RodentsTable,
			Columns: router.RodentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: rodent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   router.ProjectTable,
			Columns: []string{router.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   router.ProjectTable,
			Columns: []string{router.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{router.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RouterUpdateOne is the builder for updating a single Router entity.
type RouterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RouterMutation
}

// SetRname sets the "rname" field.
func (ruo *RouterUpdateOne) SetRname(s string) *RouterUpdateOne {
	ruo.mutation.SetRname(s)
	return ruo
}

// SetPrivkey sets the "privkey" field.
func (ruo *RouterUpdateOne) SetPrivkey(b []byte) *RouterUpdateOne {
	ruo.mutation.SetPrivkey(b)
	return ruo
}

// SetCert sets the "cert" field.
func (ruo *RouterUpdateOne) SetCert(b []byte) *RouterUpdateOne {
	ruo.mutation.SetCert(b)
	return ruo
}

// SetCommands sets the "commands" field.
func (ruo *RouterUpdateOne) SetCommands(s []string) *RouterUpdateOne {
	ruo.mutation.SetCommands(s)
	return ruo
}

// AppendCommands appends s to the "commands" field.
func (ruo *RouterUpdateOne) AppendCommands(s []string) *RouterUpdateOne {
	ruo.mutation.AppendCommands(s)
	return ruo
}

// ClearCommands clears the value of the "commands" field.
func (ruo *RouterUpdateOne) ClearCommands() *RouterUpdateOne {
	ruo.mutation.ClearCommands()
	return ruo
}

// SetInterfaces sets the "interfaces" field.
func (ruo *RouterUpdateOne) SetInterfaces(s []string) *RouterUpdateOne {
	ruo.mutation.SetInterfaces(s)
	return ruo
}

// AppendInterfaces appends s to the "interfaces" field.
func (ruo *RouterUpdateOne) AppendInterfaces(s []string) *RouterUpdateOne {
	ruo.mutation.AppendInterfaces(s)
	return ruo
}

// ClearInterfaces clears the value of the "interfaces" field.
func (ruo *RouterUpdateOne) ClearInterfaces() *RouterUpdateOne {
	ruo.mutation.ClearInterfaces()
	return ruo
}

// AddRodentIDs adds the "rodents" edge to the Rodent entity by IDs.
func (ruo *RouterUpdateOne) AddRodentIDs(ids ...xid.ID) *RouterUpdateOne {
	ruo.mutation.AddRodentIDs(ids...)
	return ruo
}

// AddRodents adds the "rodents" edges to the Rodent entity.
func (ruo *RouterUpdateOne) AddRodents(r ...*Rodent) *RouterUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddRodentIDs(ids...)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (ruo *RouterUpdateOne) SetProjectID(id xid.ID) *RouterUpdateOne {
	ruo.mutation.SetProjectID(id)
	return ruo
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (ruo *RouterUpdateOne) SetNillableProjectID(id *xid.ID) *RouterUpdateOne {
	if id != nil {
		ruo = ruo.SetProjectID(*id)
	}
	return ruo
}

// SetProject sets the "project" edge to the Project entity.
func (ruo *RouterUpdateOne) SetProject(p *Project) *RouterUpdateOne {
	return ruo.SetProjectID(p.ID)
}

// Mutation returns the RouterMutation object of the builder.
func (ruo *RouterUpdateOne) Mutation() *RouterMutation {
	return ruo.mutation
}

// ClearRodents clears all "rodents" edges to the Rodent entity.
func (ruo *RouterUpdateOne) ClearRodents() *RouterUpdateOne {
	ruo.mutation.ClearRodents()
	return ruo
}

// RemoveRodentIDs removes the "rodents" edge to Rodent entities by IDs.
func (ruo *RouterUpdateOne) RemoveRodentIDs(ids ...xid.ID) *RouterUpdateOne {
	ruo.mutation.RemoveRodentIDs(ids...)
	return ruo
}

// RemoveRodents removes "rodents" edges to Rodent entities.
func (ruo *RouterUpdateOne) RemoveRodents(r ...*Rodent) *RouterUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveRodentIDs(ids...)
}

// ClearProject clears the "project" edge to the Project entity.
func (ruo *RouterUpdateOne) ClearProject() *RouterUpdateOne {
	ruo.mutation.ClearProject()
	return ruo
}

// Where appends a list predicates to the RouterUpdate builder.
func (ruo *RouterUpdateOne) Where(ps ...predicate.Router) *RouterUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RouterUpdateOne) Select(field string, fields ...string) *RouterUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Router entity.
func (ruo *RouterUpdateOne) Save(ctx context.Context) (*Router, error) {
	return withHooks[*Router, RouterMutation](ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RouterUpdateOne) SaveX(ctx context.Context) *Router {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RouterUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RouterUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RouterUpdateOne) sqlSave(ctx context.Context) (_node *Router, err error) {
	_spec := sqlgraph.NewUpdateSpec(router.Table, router.Columns, sqlgraph.NewFieldSpec(router.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Router.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, router.FieldID)
		for _, f := range fields {
			if !router.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != router.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Rname(); ok {
		_spec.SetField(router.FieldRname, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Privkey(); ok {
		_spec.SetField(router.FieldPrivkey, field.TypeBytes, value)
	}
	if value, ok := ruo.mutation.Cert(); ok {
		_spec.SetField(router.FieldCert, field.TypeBytes, value)
	}
	if value, ok := ruo.mutation.Commands(); ok {
		_spec.SetField(router.FieldCommands, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedCommands(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, router.FieldCommands, value)
		})
	}
	if ruo.mutation.CommandsCleared() {
		_spec.ClearField(router.FieldCommands, field.TypeJSON)
	}
	if value, ok := ruo.mutation.Interfaces(); ok {
		_spec.SetField(router.FieldInterfaces, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedInterfaces(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, router.FieldInterfaces, value)
		})
	}
	if ruo.mutation.InterfacesCleared() {
		_spec.ClearField(router.FieldInterfaces, field.TypeJSON)
	}
	if ruo.mutation.RodentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   router.RodentsTable,
			Columns: router.RodentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: rodent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRodentsIDs(); len(nodes) > 0 && !ruo.mutation.RodentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   router.RodentsTable,
			Columns: router.RodentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: rodent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RodentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   router.RodentsTable,
			Columns: router.RodentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: rodent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   router.ProjectTable,
			Columns: []string{router.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   router.ProjectTable,
			Columns: []string{router.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Router{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{router.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
