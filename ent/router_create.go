// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/salukikit/rodentity/ent/project"
	"github.com/salukikit/rodentity/ent/rodent"
	"github.com/salukikit/rodentity/ent/router"
)

// RouterCreate is the builder for creating a Router entity.
type RouterCreate struct {
	config
	mutation *RouterMutation
	hooks    []Hook
}

// SetRname sets the "rname" field.
func (rc *RouterCreate) SetRname(s string) *RouterCreate {
	rc.mutation.SetRname(s)
	return rc
}

// SetPrivkey sets the "privkey" field.
func (rc *RouterCreate) SetPrivkey(b []byte) *RouterCreate {
	rc.mutation.SetPrivkey(b)
	return rc
}

// SetCert sets the "cert" field.
func (rc *RouterCreate) SetCert(b []byte) *RouterCreate {
	rc.mutation.SetCert(b)
	return rc
}

// SetCommands sets the "commands" field.
func (rc *RouterCreate) SetCommands(s []string) *RouterCreate {
	rc.mutation.SetCommands(s)
	return rc
}

// SetInterfaces sets the "interfaces" field.
func (rc *RouterCreate) SetInterfaces(s []string) *RouterCreate {
	rc.mutation.SetInterfaces(s)
	return rc
}

// SetID sets the "id" field.
func (rc *RouterCreate) SetID(x xid.ID) *RouterCreate {
	rc.mutation.SetID(x)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RouterCreate) SetNillableID(x *xid.ID) *RouterCreate {
	if x != nil {
		rc.SetID(*x)
	}
	return rc
}

// AddRodentIDs adds the "rodents" edge to the Rodent entity by IDs.
func (rc *RouterCreate) AddRodentIDs(ids ...xid.ID) *RouterCreate {
	rc.mutation.AddRodentIDs(ids...)
	return rc
}

// AddRodents adds the "rodents" edges to the Rodent entity.
func (rc *RouterCreate) AddRodents(r ...*Rodent) *RouterCreate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddRodentIDs(ids...)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (rc *RouterCreate) SetProjectID(id xid.ID) *RouterCreate {
	rc.mutation.SetProjectID(id)
	return rc
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (rc *RouterCreate) SetNillableProjectID(id *xid.ID) *RouterCreate {
	if id != nil {
		rc = rc.SetProjectID(*id)
	}
	return rc
}

// SetProject sets the "project" edge to the Project entity.
func (rc *RouterCreate) SetProject(p *Project) *RouterCreate {
	return rc.SetProjectID(p.ID)
}

// Mutation returns the RouterMutation object of the builder.
func (rc *RouterCreate) Mutation() *RouterMutation {
	return rc.mutation
}

// Save creates the Router in the database.
func (rc *RouterCreate) Save(ctx context.Context) (*Router, error) {
	rc.defaults()
	return withHooks[*Router, RouterMutation](ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RouterCreate) SaveX(ctx context.Context) *Router {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RouterCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RouterCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RouterCreate) defaults() {
	if _, ok := rc.mutation.ID(); !ok {
		v := router.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RouterCreate) check() error {
	if _, ok := rc.mutation.Rname(); !ok {
		return &ValidationError{Name: "rname", err: errors.New(`ent: missing required field "Router.rname"`)}
	}
	if _, ok := rc.mutation.Privkey(); !ok {
		return &ValidationError{Name: "privkey", err: errors.New(`ent: missing required field "Router.privkey"`)}
	}
	if _, ok := rc.mutation.Cert(); !ok {
		return &ValidationError{Name: "cert", err: errors.New(`ent: missing required field "Router.cert"`)}
	}
	return nil
}

func (rc *RouterCreate) sqlSave(ctx context.Context) (*Router, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RouterCreate) createSpec() (*Router, *sqlgraph.CreateSpec) {
	var (
		_node = &Router{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(router.Table, sqlgraph.NewFieldSpec(router.FieldID, field.TypeString))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.Rname(); ok {
		_spec.SetField(router.FieldRname, field.TypeString, value)
		_node.Rname = value
	}
	if value, ok := rc.mutation.Privkey(); ok {
		_spec.SetField(router.FieldPrivkey, field.TypeBytes, value)
		_node.Privkey = value
	}
	if value, ok := rc.mutation.Cert(); ok {
		_spec.SetField(router.FieldCert, field.TypeBytes, value)
		_node.Cert = value
	}
	if value, ok := rc.mutation.Commands(); ok {
		_spec.SetField(router.FieldCommands, field.TypeJSON, value)
		_node.Commands = value
	}
	if value, ok := rc.mutation.Interfaces(); ok {
		_spec.SetField(router.FieldInterfaces, field.TypeJSON, value)
		_node.Interfaces = value
	}
	if nodes := rc.mutation.RodentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   router.RodentsTable,
			Columns: router.RodentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: rodent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   router.ProjectTable,
			Columns: []string{router.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_routers = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RouterCreateBulk is the builder for creating many Router entities in bulk.
type RouterCreateBulk struct {
	config
	builders []*RouterCreate
}

// Save creates the Router entities in the database.
func (rcb *RouterCreateBulk) Save(ctx context.Context) ([]*Router, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Router, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RouterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RouterCreateBulk) SaveX(ctx context.Context) []*Router {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RouterCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RouterCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
