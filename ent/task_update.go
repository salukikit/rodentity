// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/salukikit/rodentity/ent/loot"
	"github.com/salukikit/rodentity/ent/operator"
	"github.com/salukikit/rodentity/ent/predicate"
	"github.com/salukikit/rodentity/ent/rodent"
	"github.com/salukikit/rodentity/ent/task"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetType sets the "type" field.
func (tu *TaskUpdate) SetType(s string) *TaskUpdate {
	tu.mutation.SetType(s)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableType(s *string) *TaskUpdate {
	if s != nil {
		tu.SetType(*s)
	}
	return tu
}

// SetArgs sets the "args" field.
func (tu *TaskUpdate) SetArgs(s []string) *TaskUpdate {
	tu.mutation.SetArgs(s)
	return tu
}

// AppendArgs appends s to the "args" field.
func (tu *TaskUpdate) AppendArgs(s []string) *TaskUpdate {
	tu.mutation.AppendArgs(s)
	return tu
}

// ClearArgs clears the value of the "args" field.
func (tu *TaskUpdate) ClearArgs() *TaskUpdate {
	tu.mutation.ClearArgs()
	return tu
}

// SetData sets the "data" field.
func (tu *TaskUpdate) SetData(b []byte) *TaskUpdate {
	tu.mutation.SetData(b)
	return tu
}

// ClearData clears the value of the "data" field.
func (tu *TaskUpdate) ClearData() *TaskUpdate {
	tu.mutation.ClearData()
	return tu
}

// SetResult sets the "result" field.
func (tu *TaskUpdate) SetResult(b []byte) *TaskUpdate {
	tu.mutation.SetResult(b)
	return tu
}

// ClearResult clears the value of the "result" field.
func (tu *TaskUpdate) ClearResult() *TaskUpdate {
	tu.mutation.ClearResult()
	return tu
}

// SetExecuted sets the "Executed" field.
func (tu *TaskUpdate) SetExecuted(b bool) *TaskUpdate {
	tu.mutation.SetExecuted(b)
	return tu
}

// SetNillableExecuted sets the "Executed" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableExecuted(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetExecuted(*b)
	}
	return tu
}

// SetLooted sets the "looted" field.
func (tu *TaskUpdate) SetLooted(b bool) *TaskUpdate {
	tu.mutation.SetLooted(b)
	return tu
}

// SetNillableLooted sets the "looted" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLooted(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetLooted(*b)
	}
	return tu
}

// SetRequestedat sets the "requestedat" field.
func (tu *TaskUpdate) SetRequestedat(t time.Time) *TaskUpdate {
	tu.mutation.SetRequestedat(t)
	return tu
}

// SetCompletedat sets the "completedat" field.
func (tu *TaskUpdate) SetCompletedat(t time.Time) *TaskUpdate {
	tu.mutation.SetCompletedat(t)
	return tu
}

// SetNillableCompletedat sets the "completedat" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCompletedat(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetCompletedat(*t)
	}
	return tu
}

// ClearCompletedat clears the value of the "completedat" field.
func (tu *TaskUpdate) ClearCompletedat() *TaskUpdate {
	tu.mutation.ClearCompletedat()
	return tu
}

// SetTTPs sets the "TTPs" field.
func (tu *TaskUpdate) SetTTPs(s []string) *TaskUpdate {
	tu.mutation.SetTTPs(s)
	return tu
}

// AppendTTPs appends s to the "TTPs" field.
func (tu *TaskUpdate) AppendTTPs(s []string) *TaskUpdate {
	tu.mutation.AppendTTPs(s)
	return tu
}

// ClearTTPs clears the value of the "TTPs" field.
func (tu *TaskUpdate) ClearTTPs() *TaskUpdate {
	tu.mutation.ClearTTPs()
	return tu
}

// SetRodentID sets the "rodent" edge to the Rodent entity by ID.
func (tu *TaskUpdate) SetRodentID(id xid.ID) *TaskUpdate {
	tu.mutation.SetRodentID(id)
	return tu
}

// SetNillableRodentID sets the "rodent" edge to the Rodent entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillableRodentID(id *xid.ID) *TaskUpdate {
	if id != nil {
		tu = tu.SetRodentID(*id)
	}
	return tu
}

// SetRodent sets the "rodent" edge to the Rodent entity.
func (tu *TaskUpdate) SetRodent(r *Rodent) *TaskUpdate {
	return tu.SetRodentID(r.ID)
}

// SetOperatorID sets the "operator" edge to the Operator entity by ID.
func (tu *TaskUpdate) SetOperatorID(id xid.ID) *TaskUpdate {
	tu.mutation.SetOperatorID(id)
	return tu
}

// SetNillableOperatorID sets the "operator" edge to the Operator entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillableOperatorID(id *xid.ID) *TaskUpdate {
	if id != nil {
		tu = tu.SetOperatorID(*id)
	}
	return tu
}

// SetOperator sets the "operator" edge to the Operator entity.
func (tu *TaskUpdate) SetOperator(o *Operator) *TaskUpdate {
	return tu.SetOperatorID(o.ID)
}

// AddLootIDs adds the "loot" edge to the Loot entity by IDs.
func (tu *TaskUpdate) AddLootIDs(ids ...xid.ID) *TaskUpdate {
	tu.mutation.AddLootIDs(ids...)
	return tu
}

// AddLoot adds the "loot" edges to the Loot entity.
func (tu *TaskUpdate) AddLoot(l ...*Loot) *TaskUpdate {
	ids := make([]xid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tu.AddLootIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearRodent clears the "rodent" edge to the Rodent entity.
func (tu *TaskUpdate) ClearRodent() *TaskUpdate {
	tu.mutation.ClearRodent()
	return tu
}

// ClearOperator clears the "operator" edge to the Operator entity.
func (tu *TaskUpdate) ClearOperator() *TaskUpdate {
	tu.mutation.ClearOperator()
	return tu
}

// ClearLoot clears all "loot" edges to the Loot entity.
func (tu *TaskUpdate) ClearLoot() *TaskUpdate {
	tu.mutation.ClearLoot()
	return tu
}

// RemoveLootIDs removes the "loot" edge to Loot entities by IDs.
func (tu *TaskUpdate) RemoveLootIDs(ids ...xid.ID) *TaskUpdate {
	tu.mutation.RemoveLootIDs(ids...)
	return tu
}

// RemoveLoot removes "loot" edges to Loot entities.
func (tu *TaskUpdate) RemoveLoot(l ...*Loot) *TaskUpdate {
	ids := make([]xid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tu.RemoveLootIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TaskMutation](ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeString, value)
	}
	if value, ok := tu.mutation.Args(); ok {
		_spec.SetField(task.FieldArgs, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedArgs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, task.FieldArgs, value)
		})
	}
	if tu.mutation.ArgsCleared() {
		_spec.ClearField(task.FieldArgs, field.TypeJSON)
	}
	if value, ok := tu.mutation.Data(); ok {
		_spec.SetField(task.FieldData, field.TypeBytes, value)
	}
	if tu.mutation.DataCleared() {
		_spec.ClearField(task.FieldData, field.TypeBytes)
	}
	if value, ok := tu.mutation.Result(); ok {
		_spec.SetField(task.FieldResult, field.TypeBytes, value)
	}
	if tu.mutation.ResultCleared() {
		_spec.ClearField(task.FieldResult, field.TypeBytes)
	}
	if value, ok := tu.mutation.Executed(); ok {
		_spec.SetField(task.FieldExecuted, field.TypeBool, value)
	}
	if value, ok := tu.mutation.Looted(); ok {
		_spec.SetField(task.FieldLooted, field.TypeBool, value)
	}
	if value, ok := tu.mutation.Requestedat(); ok {
		_spec.SetField(task.FieldRequestedat, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Completedat(); ok {
		_spec.SetField(task.FieldCompletedat, field.TypeTime, value)
	}
	if tu.mutation.CompletedatCleared() {
		_spec.ClearField(task.FieldCompletedat, field.TypeTime)
	}
	if value, ok := tu.mutation.TTPs(); ok {
		_spec.SetField(task.FieldTTPs, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedTTPs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, task.FieldTTPs, value)
		})
	}
	if tu.mutation.TTPsCleared() {
		_spec.ClearField(task.FieldTTPs, field.TypeJSON)
	}
	if tu.mutation.RodentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.RodentTable,
			Columns: []string{task.RodentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: rodent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RodentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.RodentTable,
			Columns: []string{task.RodentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: rodent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.OperatorTable,
			Columns: []string{task.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: operator.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.OperatorTable,
			Columns: []string{task.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: operator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.LootCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.LootTable,
			Columns: []string{task.LootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: loot.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedLootIDs(); len(nodes) > 0 && !tu.mutation.LootCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.LootTable,
			Columns: []string{task.LootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: loot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.LootIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.LootTable,
			Columns: []string{task.LootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: loot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetType sets the "type" field.
func (tuo *TaskUpdateOne) SetType(s string) *TaskUpdateOne {
	tuo.mutation.SetType(s)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableType(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetType(*s)
	}
	return tuo
}

// SetArgs sets the "args" field.
func (tuo *TaskUpdateOne) SetArgs(s []string) *TaskUpdateOne {
	tuo.mutation.SetArgs(s)
	return tuo
}

// AppendArgs appends s to the "args" field.
func (tuo *TaskUpdateOne) AppendArgs(s []string) *TaskUpdateOne {
	tuo.mutation.AppendArgs(s)
	return tuo
}

// ClearArgs clears the value of the "args" field.
func (tuo *TaskUpdateOne) ClearArgs() *TaskUpdateOne {
	tuo.mutation.ClearArgs()
	return tuo
}

// SetData sets the "data" field.
func (tuo *TaskUpdateOne) SetData(b []byte) *TaskUpdateOne {
	tuo.mutation.SetData(b)
	return tuo
}

// ClearData clears the value of the "data" field.
func (tuo *TaskUpdateOne) ClearData() *TaskUpdateOne {
	tuo.mutation.ClearData()
	return tuo
}

// SetResult sets the "result" field.
func (tuo *TaskUpdateOne) SetResult(b []byte) *TaskUpdateOne {
	tuo.mutation.SetResult(b)
	return tuo
}

// ClearResult clears the value of the "result" field.
func (tuo *TaskUpdateOne) ClearResult() *TaskUpdateOne {
	tuo.mutation.ClearResult()
	return tuo
}

// SetExecuted sets the "Executed" field.
func (tuo *TaskUpdateOne) SetExecuted(b bool) *TaskUpdateOne {
	tuo.mutation.SetExecuted(b)
	return tuo
}

// SetNillableExecuted sets the "Executed" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableExecuted(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetExecuted(*b)
	}
	return tuo
}

// SetLooted sets the "looted" field.
func (tuo *TaskUpdateOne) SetLooted(b bool) *TaskUpdateOne {
	tuo.mutation.SetLooted(b)
	return tuo
}

// SetNillableLooted sets the "looted" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLooted(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetLooted(*b)
	}
	return tuo
}

// SetRequestedat sets the "requestedat" field.
func (tuo *TaskUpdateOne) SetRequestedat(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetRequestedat(t)
	return tuo
}

// SetCompletedat sets the "completedat" field.
func (tuo *TaskUpdateOne) SetCompletedat(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetCompletedat(t)
	return tuo
}

// SetNillableCompletedat sets the "completedat" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCompletedat(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetCompletedat(*t)
	}
	return tuo
}

// ClearCompletedat clears the value of the "completedat" field.
func (tuo *TaskUpdateOne) ClearCompletedat() *TaskUpdateOne {
	tuo.mutation.ClearCompletedat()
	return tuo
}

// SetTTPs sets the "TTPs" field.
func (tuo *TaskUpdateOne) SetTTPs(s []string) *TaskUpdateOne {
	tuo.mutation.SetTTPs(s)
	return tuo
}

// AppendTTPs appends s to the "TTPs" field.
func (tuo *TaskUpdateOne) AppendTTPs(s []string) *TaskUpdateOne {
	tuo.mutation.AppendTTPs(s)
	return tuo
}

// ClearTTPs clears the value of the "TTPs" field.
func (tuo *TaskUpdateOne) ClearTTPs() *TaskUpdateOne {
	tuo.mutation.ClearTTPs()
	return tuo
}

// SetRodentID sets the "rodent" edge to the Rodent entity by ID.
func (tuo *TaskUpdateOne) SetRodentID(id xid.ID) *TaskUpdateOne {
	tuo.mutation.SetRodentID(id)
	return tuo
}

// SetNillableRodentID sets the "rodent" edge to the Rodent entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableRodentID(id *xid.ID) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetRodentID(*id)
	}
	return tuo
}

// SetRodent sets the "rodent" edge to the Rodent entity.
func (tuo *TaskUpdateOne) SetRodent(r *Rodent) *TaskUpdateOne {
	return tuo.SetRodentID(r.ID)
}

// SetOperatorID sets the "operator" edge to the Operator entity by ID.
func (tuo *TaskUpdateOne) SetOperatorID(id xid.ID) *TaskUpdateOne {
	tuo.mutation.SetOperatorID(id)
	return tuo
}

// SetNillableOperatorID sets the "operator" edge to the Operator entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableOperatorID(id *xid.ID) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetOperatorID(*id)
	}
	return tuo
}

// SetOperator sets the "operator" edge to the Operator entity.
func (tuo *TaskUpdateOne) SetOperator(o *Operator) *TaskUpdateOne {
	return tuo.SetOperatorID(o.ID)
}

// AddLootIDs adds the "loot" edge to the Loot entity by IDs.
func (tuo *TaskUpdateOne) AddLootIDs(ids ...xid.ID) *TaskUpdateOne {
	tuo.mutation.AddLootIDs(ids...)
	return tuo
}

// AddLoot adds the "loot" edges to the Loot entity.
func (tuo *TaskUpdateOne) AddLoot(l ...*Loot) *TaskUpdateOne {
	ids := make([]xid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tuo.AddLootIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearRodent clears the "rodent" edge to the Rodent entity.
func (tuo *TaskUpdateOne) ClearRodent() *TaskUpdateOne {
	tuo.mutation.ClearRodent()
	return tuo
}

// ClearOperator clears the "operator" edge to the Operator entity.
func (tuo *TaskUpdateOne) ClearOperator() *TaskUpdateOne {
	tuo.mutation.ClearOperator()
	return tuo
}

// ClearLoot clears all "loot" edges to the Loot entity.
func (tuo *TaskUpdateOne) ClearLoot() *TaskUpdateOne {
	tuo.mutation.ClearLoot()
	return tuo
}

// RemoveLootIDs removes the "loot" edge to Loot entities by IDs.
func (tuo *TaskUpdateOne) RemoveLootIDs(ids ...xid.ID) *TaskUpdateOne {
	tuo.mutation.RemoveLootIDs(ids...)
	return tuo
}

// RemoveLoot removes "loot" edges to Loot entities.
func (tuo *TaskUpdateOne) RemoveLoot(l ...*Loot) *TaskUpdateOne {
	ids := make([]xid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tuo.RemoveLootIDs(ids...)
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	return withHooks[*Task, TaskMutation](ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Args(); ok {
		_spec.SetField(task.FieldArgs, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedArgs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, task.FieldArgs, value)
		})
	}
	if tuo.mutation.ArgsCleared() {
		_spec.ClearField(task.FieldArgs, field.TypeJSON)
	}
	if value, ok := tuo.mutation.Data(); ok {
		_spec.SetField(task.FieldData, field.TypeBytes, value)
	}
	if tuo.mutation.DataCleared() {
		_spec.ClearField(task.FieldData, field.TypeBytes)
	}
	if value, ok := tuo.mutation.Result(); ok {
		_spec.SetField(task.FieldResult, field.TypeBytes, value)
	}
	if tuo.mutation.ResultCleared() {
		_spec.ClearField(task.FieldResult, field.TypeBytes)
	}
	if value, ok := tuo.mutation.Executed(); ok {
		_spec.SetField(task.FieldExecuted, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.Looted(); ok {
		_spec.SetField(task.FieldLooted, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.Requestedat(); ok {
		_spec.SetField(task.FieldRequestedat, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Completedat(); ok {
		_spec.SetField(task.FieldCompletedat, field.TypeTime, value)
	}
	if tuo.mutation.CompletedatCleared() {
		_spec.ClearField(task.FieldCompletedat, field.TypeTime)
	}
	if value, ok := tuo.mutation.TTPs(); ok {
		_spec.SetField(task.FieldTTPs, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedTTPs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, task.FieldTTPs, value)
		})
	}
	if tuo.mutation.TTPsCleared() {
		_spec.ClearField(task.FieldTTPs, field.TypeJSON)
	}
	if tuo.mutation.RodentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.RodentTable,
			Columns: []string{task.RodentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: rodent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RodentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.RodentTable,
			Columns: []string{task.RodentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: rodent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.OperatorTable,
			Columns: []string{task.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: operator.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.OperatorTable,
			Columns: []string{task.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: operator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.LootCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.LootTable,
			Columns: []string{task.LootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: loot.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedLootIDs(); len(nodes) > 0 && !tuo.mutation.LootCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.LootTable,
			Columns: []string{task.LootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: loot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.LootIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.LootTable,
			Columns: []string{task.LootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: loot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
