// Code generated by ent, DO NOT EDIT.

package device

import (
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the device type in the database.
	Label = "device"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldOs holds the string denoting the os field in the database.
	FieldOs = "os"
	// FieldArch holds the string denoting the arch field in the database.
	FieldArch = "arch"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldNetInterfaces holds the string denoting the net_interfaces field in the database.
	FieldNetInterfaces = "net_interfaces"
	// FieldMachinepass holds the string denoting the machinepass field in the database.
	FieldMachinepass = "machinepass"
	// FieldCertificates holds the string denoting the certificates field in the database.
	FieldCertificates = "certificates"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeRodents holds the string denoting the rodents edge name in mutations.
	EdgeRodents = "rodents"
	// EdgeGroups holds the string denoting the groups edge name in mutations.
	EdgeGroups = "groups"
	// EdgeDomain holds the string denoting the domain edge name in mutations.
	EdgeDomain = "domain"
	// EdgeSubnets holds the string denoting the subnets edge name in mutations.
	EdgeSubnets = "subnets"
	// EdgeServices holds the string denoting the services edge name in mutations.
	EdgeServices = "services"
	// Table holds the table name of the device in the database.
	Table = "devices"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "device_users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// RodentsTable is the table that holds the rodents relation/edge.
	RodentsTable = "rodents"
	// RodentsInverseTable is the table name for the Rodent entity.
	// It exists in this package in order to avoid circular dependency with the "rodent" package.
	RodentsInverseTable = "rodents"
	// RodentsColumn is the table column denoting the rodents relation/edge.
	RodentsColumn = "device_rodents"
	// GroupsTable is the table that holds the groups relation/edge. The primary key declared below.
	GroupsTable = "group_devices"
	// GroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupsInverseTable = "groups"
	// DomainTable is the table that holds the domain relation/edge.
	DomainTable = "devices"
	// DomainInverseTable is the table name for the Domain entity.
	// It exists in this package in order to avoid circular dependency with the "domain" package.
	DomainInverseTable = "domains"
	// DomainColumn is the table column denoting the domain relation/edge.
	DomainColumn = "domain_devices"
	// SubnetsTable is the table that holds the subnets relation/edge. The primary key declared below.
	SubnetsTable = "subnet_hosts"
	// SubnetsInverseTable is the table name for the Subnet entity.
	// It exists in this package in order to avoid circular dependency with the "subnet" package.
	SubnetsInverseTable = "subnets"
	// ServicesTable is the table that holds the services relation/edge. The primary key declared below.
	ServicesTable = "services_devices"
	// ServicesInverseTable is the table name for the Services entity.
	// It exists in this package in order to avoid circular dependency with the "services" package.
	ServicesInverseTable = "services"
)

// Columns holds all SQL columns for device fields.
var Columns = []string{
	FieldID,
	FieldHostname,
	FieldOs,
	FieldArch,
	FieldVersion,
	FieldNetInterfaces,
	FieldMachinepass,
	FieldCertificates,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "devices"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"domain_devices",
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"device_id", "user_id"}
	// GroupsPrimaryKey and GroupsColumn2 are the table columns denoting the
	// primary key for the groups relation (M2M).
	GroupsPrimaryKey = []string{"group_id", "device_id"}
	// SubnetsPrimaryKey and SubnetsColumn2 are the table columns denoting the
	// primary key for the subnets relation (M2M).
	SubnetsPrimaryKey = []string{"subnet_id", "device_id"}
	// ServicesPrimaryKey and ServicesColumn2 are the table columns denoting the
	// primary key for the services relation (M2M).
	ServicesPrimaryKey = []string{"services_id", "device_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultOs holds the default value on creation for the "os" field.
	DefaultOs string
	// DefaultArch holds the default value on creation for the "arch" field.
	DefaultArch string
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)
