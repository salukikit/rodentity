// Code generated by ent, DO NOT EDIT.

package rodent

const (
	// Label holds the string label denoting the rodent type in the database.
	Label = "rodent"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldUsercontext holds the string denoting the usercontext field in the database.
	FieldUsercontext = "usercontext"
	// FieldComms holds the string denoting the comms field in the database.
	FieldComms = "comms"
	// FieldCommsInspected holds the string denoting the comms_inspected field in the database.
	FieldCommsInspected = "comms_inspected"
	// FieldBeacontime holds the string denoting the beacontime field in the database.
	FieldBeacontime = "beacontime"
	// FieldBurned holds the string denoting the burned field in the database.
	FieldBurned = "burned"
	// FieldAlive holds the string denoting the alive field in the database.
	FieldAlive = "alive"
	// FieldJoined holds the string denoting the joined field in the database.
	FieldJoined = "joined"
	// FieldLastseen holds the string denoting the lastseen field in the database.
	FieldLastseen = "lastseen"
	// EdgeDevice holds the string denoting the device edge name in mutations.
	EdgeDevice = "device"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeRouter holds the string denoting the router edge name in mutations.
	EdgeRouter = "router"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// EdgeLoot holds the string denoting the loot edge name in mutations.
	EdgeLoot = "loot"
	// Table holds the table name of the rodent in the database.
	Table = "rodents"
	// DeviceTable is the table that holds the device relation/edge.
	DeviceTable = "rodents"
	// DeviceInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DeviceInverseTable = "devices"
	// DeviceColumn is the table column denoting the device relation/edge.
	DeviceColumn = "device_rodents"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "rodents"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_rodents"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "rodents"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_rodents"
	// RouterTable is the table that holds the router relation/edge. The primary key declared below.
	RouterTable = "router_rodents"
	// RouterInverseTable is the table name for the Router entity.
	// It exists in this package in order to avoid circular dependency with the "router" package.
	RouterInverseTable = "routers"
	// TasksTable is the table that holds the tasks relation/edge.
	TasksTable = "tasks"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "tasks"
	// TasksColumn is the table column denoting the tasks relation/edge.
	TasksColumn = "rodent_tasks"
	// LootTable is the table that holds the loot relation/edge.
	LootTable = "loots"
	// LootInverseTable is the table name for the Loot entity.
	// It exists in this package in order to avoid circular dependency with the "loot" package.
	LootInverseTable = "loots"
	// LootColumn is the table column denoting the loot relation/edge.
	LootColumn = "rodent_loot"
)

// Columns holds all SQL columns for rodent fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldKey,
	FieldUsercontext,
	FieldComms,
	FieldCommsInspected,
	FieldBeacontime,
	FieldBurned,
	FieldAlive,
	FieldJoined,
	FieldLastseen,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "rodents"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"device_rodents",
	"project_rodents",
	"user_rodents",
}

var (
	// RouterPrimaryKey and RouterColumn2 are the table columns denoting the
	// primary key for the router relation (M2M).
	RouterPrimaryKey = []string{"router_id", "rodent_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
	// DefaultBurned holds the default value on creation for the "burned" field.
	DefaultBurned bool
	// DefaultAlive holds the default value on creation for the "alive" field.
	DefaultAlive bool
)
