// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/salukikit/rodentity/ent/loot"
)

// Loot is the model entity for the Loot schema.
type Loot struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type loot.Type `json:"type,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Data holds the value of the "data" field.
	Data []byte `json:"data,omitempty"`
	// Collectedon holds the value of the "collectedon" field.
	Collectedon time.Time `json:"collectedon,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LootQuery when eager-loading is set.
	Edges LootEdges `json:"edges"`
}

// LootEdges holds the relations/edges for other nodes in the graph.
type LootEdges struct {
	// Rodent holds the value of the rodent edge.
	Rodent []*Rodent `json:"rodent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RodentOrErr returns the Rodent value or an error if the edge
// was not loaded in eager-loading.
func (e LootEdges) RodentOrErr() ([]*Rodent, error) {
	if e.loadedTypes[0] {
		return e.Rodent, nil
	}
	return nil, &NotLoadedError{edge: "rodent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Loot) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case loot.FieldData:
			values[i] = new([]byte)
		case loot.FieldID, loot.FieldType, loot.FieldLocation:
			values[i] = new(sql.NullString)
		case loot.FieldCollectedon:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Loot", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Loot fields.
func (l *Loot) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case loot.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				l.ID = value.String
			}
		case loot.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				l.Type = loot.Type(value.String)
			}
		case loot.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				l.Location = value.String
			}
		case loot.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil {
				l.Data = *value
			}
		case loot.FieldCollectedon:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field collectedon", values[i])
			} else if value.Valid {
				l.Collectedon = value.Time
			}
		}
	}
	return nil
}

// QueryRodent queries the "rodent" edge of the Loot entity.
func (l *Loot) QueryRodent() *RodentQuery {
	return (&LootClient{config: l.config}).QueryRodent(l)
}

// Update returns a builder for updating this Loot.
// Note that you need to call Loot.Unwrap() before calling this method if this Loot
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Loot) Update() *LootUpdateOne {
	return (&LootClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Loot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Loot) Unwrap() *Loot {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Loot is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Loot) String() string {
	var builder strings.Builder
	builder.WriteString("Loot(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", l.Type))
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(l.Location)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", l.Data))
	builder.WriteString(", ")
	builder.WriteString("collectedon=")
	builder.WriteString(l.Collectedon.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Loots is a parsable slice of Loot.
type Loots []*Loot

func (l Loots) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
