// Code generated by ent, DO NOT EDIT.

package user

import (
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldGivenname holds the string denoting the givenname field in the database.
	FieldGivenname = "givenname"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldOwned holds the string denoting the owned field in the database.
	FieldOwned = "owned"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldHomedir holds the string denoting the homedir field in the database.
	FieldHomedir = "homedir"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// EdgeDevices holds the string denoting the devices edge name in mutations.
	EdgeDevices = "devices"
	// EdgeRodents holds the string denoting the rodents edge name in mutations.
	EdgeRodents = "rodents"
	// EdgeGroups holds the string denoting the groups edge name in mutations.
	EdgeGroups = "groups"
	// EdgeDomain holds the string denoting the domain edge name in mutations.
	EdgeDomain = "domain"
	// Table holds the table name of the user in the database.
	Table = "users"
	// DevicesTable is the table that holds the devices relation/edge. The primary key declared below.
	DevicesTable = "device_users"
	// DevicesInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DevicesInverseTable = "devices"
	// RodentsTable is the table that holds the rodents relation/edge.
	RodentsTable = "rodents"
	// RodentsInverseTable is the table name for the Rodent entity.
	// It exists in this package in order to avoid circular dependency with the "rodent" package.
	RodentsInverseTable = "rodents"
	// RodentsColumn is the table column denoting the rodents relation/edge.
	RodentsColumn = "user_rodents"
	// GroupsTable is the table that holds the groups relation/edge. The primary key declared below.
	GroupsTable = "group_users"
	// GroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupsInverseTable = "groups"
	// DomainTable is the table that holds the domain relation/edge.
	DomainTable = "users"
	// DomainInverseTable is the table name for the Domain entity.
	// It exists in this package in order to avoid circular dependency with the "domain" package.
	DomainInverseTable = "domains"
	// DomainColumn is the table column denoting the domain relation/edge.
	DomainColumn = "domain_users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldGivenname,
	FieldEmail,
	FieldOwned,
	FieldAge,
	FieldHomedir,
	FieldEnabled,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"domain_users",
}

var (
	// DevicesPrimaryKey and DevicesColumn2 are the table columns denoting the
	// primary key for the devices relation (M2M).
	DevicesPrimaryKey = []string{"device_id", "user_id"}
	// GroupsPrimaryKey and GroupsColumn2 are the table columns denoting the
	// primary key for the groups relation (M2M).
	GroupsPrimaryKey = []string{"group_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultGivenname holds the default value on creation for the "givenname" field.
	DefaultGivenname string
	// DefaultEmail holds the default value on creation for the "email" field.
	DefaultEmail string
	// DefaultOwned holds the default value on creation for the "owned" field.
	DefaultOwned bool
	// DefaultAge holds the default value on creation for the "age" field.
	DefaultAge string
	// DefaultHomedir holds the default value on creation for the "homedir" field.
	DefaultHomedir string
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)
