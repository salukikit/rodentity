// Code generated by ent, DO NOT EDIT.

package router

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/salukikit/rodentity/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Router {
	return predicate.Router(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Router {
	return predicate.Router(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Router {
	return predicate.Router(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Router {
	return predicate.Router(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Router {
	return predicate.Router(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Router {
	return predicate.Router(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Router {
	return predicate.Router(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Router {
	return predicate.Router(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Router {
	return predicate.Router(sql.FieldLTE(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Router {
	return predicate.Router(sql.FieldEQ(FieldUsername, v))
}

// Privkey applies equality check predicate on the "privkey" field. It's identical to PrivkeyEQ.
func Privkey(v []byte) predicate.Router {
	return predicate.Router(sql.FieldEQ(FieldPrivkey, v))
}

// Cert applies equality check predicate on the "cert" field. It's identical to CertEQ.
func Cert(v []byte) predicate.Router {
	return predicate.Router(sql.FieldEQ(FieldCert, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Router {
	return predicate.Router(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Router {
	return predicate.Router(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Router {
	return predicate.Router(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Router {
	return predicate.Router(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Router {
	return predicate.Router(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Router {
	return predicate.Router(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Router {
	return predicate.Router(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Router {
	return predicate.Router(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Router {
	return predicate.Router(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Router {
	return predicate.Router(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Router {
	return predicate.Router(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Router {
	return predicate.Router(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Router {
	return predicate.Router(sql.FieldContainsFold(FieldUsername, v))
}

// PrivkeyEQ applies the EQ predicate on the "privkey" field.
func PrivkeyEQ(v []byte) predicate.Router {
	return predicate.Router(sql.FieldEQ(FieldPrivkey, v))
}

// PrivkeyNEQ applies the NEQ predicate on the "privkey" field.
func PrivkeyNEQ(v []byte) predicate.Router {
	return predicate.Router(sql.FieldNEQ(FieldPrivkey, v))
}

// PrivkeyIn applies the In predicate on the "privkey" field.
func PrivkeyIn(vs ...[]byte) predicate.Router {
	return predicate.Router(sql.FieldIn(FieldPrivkey, vs...))
}

// PrivkeyNotIn applies the NotIn predicate on the "privkey" field.
func PrivkeyNotIn(vs ...[]byte) predicate.Router {
	return predicate.Router(sql.FieldNotIn(FieldPrivkey, vs...))
}

// PrivkeyGT applies the GT predicate on the "privkey" field.
func PrivkeyGT(v []byte) predicate.Router {
	return predicate.Router(sql.FieldGT(FieldPrivkey, v))
}

// PrivkeyGTE applies the GTE predicate on the "privkey" field.
func PrivkeyGTE(v []byte) predicate.Router {
	return predicate.Router(sql.FieldGTE(FieldPrivkey, v))
}

// PrivkeyLT applies the LT predicate on the "privkey" field.
func PrivkeyLT(v []byte) predicate.Router {
	return predicate.Router(sql.FieldLT(FieldPrivkey, v))
}

// PrivkeyLTE applies the LTE predicate on the "privkey" field.
func PrivkeyLTE(v []byte) predicate.Router {
	return predicate.Router(sql.FieldLTE(FieldPrivkey, v))
}

// PrivkeyIsNil applies the IsNil predicate on the "privkey" field.
func PrivkeyIsNil() predicate.Router {
	return predicate.Router(sql.FieldIsNull(FieldPrivkey))
}

// PrivkeyNotNil applies the NotNil predicate on the "privkey" field.
func PrivkeyNotNil() predicate.Router {
	return predicate.Router(sql.FieldNotNull(FieldPrivkey))
}

// CertEQ applies the EQ predicate on the "cert" field.
func CertEQ(v []byte) predicate.Router {
	return predicate.Router(sql.FieldEQ(FieldCert, v))
}

// CertNEQ applies the NEQ predicate on the "cert" field.
func CertNEQ(v []byte) predicate.Router {
	return predicate.Router(sql.FieldNEQ(FieldCert, v))
}

// CertIn applies the In predicate on the "cert" field.
func CertIn(vs ...[]byte) predicate.Router {
	return predicate.Router(sql.FieldIn(FieldCert, vs...))
}

// CertNotIn applies the NotIn predicate on the "cert" field.
func CertNotIn(vs ...[]byte) predicate.Router {
	return predicate.Router(sql.FieldNotIn(FieldCert, vs...))
}

// CertGT applies the GT predicate on the "cert" field.
func CertGT(v []byte) predicate.Router {
	return predicate.Router(sql.FieldGT(FieldCert, v))
}

// CertGTE applies the GTE predicate on the "cert" field.
func CertGTE(v []byte) predicate.Router {
	return predicate.Router(sql.FieldGTE(FieldCert, v))
}

// CertLT applies the LT predicate on the "cert" field.
func CertLT(v []byte) predicate.Router {
	return predicate.Router(sql.FieldLT(FieldCert, v))
}

// CertLTE applies the LTE predicate on the "cert" field.
func CertLTE(v []byte) predicate.Router {
	return predicate.Router(sql.FieldLTE(FieldCert, v))
}

// CertIsNil applies the IsNil predicate on the "cert" field.
func CertIsNil() predicate.Router {
	return predicate.Router(sql.FieldIsNull(FieldCert))
}

// CertNotNil applies the NotNil predicate on the "cert" field.
func CertNotNil() predicate.Router {
	return predicate.Router(sql.FieldNotNull(FieldCert))
}

// CommandsIsNil applies the IsNil predicate on the "commands" field.
func CommandsIsNil() predicate.Router {
	return predicate.Router(sql.FieldIsNull(FieldCommands))
}

// CommandsNotNil applies the NotNil predicate on the "commands" field.
func CommandsNotNil() predicate.Router {
	return predicate.Router(sql.FieldNotNull(FieldCommands))
}

// HasRodents applies the HasEdge predicate on the "rodents" edge.
func HasRodents() predicate.Router {
	return predicate.Router(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RodentsTable, RodentsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRodentsWith applies the HasEdge predicate on the "rodents" edge with a given conditions (other predicates).
func HasRodentsWith(preds ...predicate.Rodent) predicate.Router {
	return predicate.Router(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RodentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RodentsTable, RodentsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.Router {
	return predicate.Router(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.Router {
	return predicate.Router(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Router) predicate.Router {
	return predicate.Router(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Router) predicate.Router {
	return predicate.Router(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Router) predicate.Router {
	return predicate.Router(func(s *sql.Selector) {
		p(s.Not())
	})
}
