// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/salukikit/rodentity/ent/services"
)

// Services is the model entity for the Services schema.
type Services struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ServiceName holds the value of the "service_name" field.
	ServiceName string `json:"service_name,omitempty"`
	// Port holds the value of the "port" field.
	Port string `json:"port,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServicesQuery when eager-loading is set.
	Edges ServicesEdges `json:"edges"`
}

// ServicesEdges holds the relations/edges for other nodes in the graph.
type ServicesEdges struct {
	// Devices holds the value of the devices edge.
	Devices []*Device `json:"devices,omitempty"`
	// Subnet holds the value of the subnet edge.
	Subnet []*Subnet `json:"subnet,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DevicesOrErr returns the Devices value or an error if the edge
// was not loaded in eager-loading.
func (e ServicesEdges) DevicesOrErr() ([]*Device, error) {
	if e.loadedTypes[0] {
		return e.Devices, nil
	}
	return nil, &NotLoadedError{edge: "devices"}
}

// SubnetOrErr returns the Subnet value or an error if the edge
// was not loaded in eager-loading.
func (e ServicesEdges) SubnetOrErr() ([]*Subnet, error) {
	if e.loadedTypes[1] {
		return e.Subnet, nil
	}
	return nil, &NotLoadedError{edge: "subnet"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Services) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case services.FieldID:
			values[i] = new(sql.NullInt64)
		case services.FieldServiceName, services.FieldPort:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Services", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Services fields.
func (s *Services) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case services.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case services.FieldServiceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_name", values[i])
			} else if value.Valid {
				s.ServiceName = value.String
			}
		case services.FieldPort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				s.Port = value.String
			}
		}
	}
	return nil
}

// QueryDevices queries the "devices" edge of the Services entity.
func (s *Services) QueryDevices() *DeviceQuery {
	return NewServicesClient(s.config).QueryDevices(s)
}

// QuerySubnet queries the "subnet" edge of the Services entity.
func (s *Services) QuerySubnet() *SubnetQuery {
	return NewServicesClient(s.config).QuerySubnet(s)
}

// Update returns a builder for updating this Services.
// Note that you need to call Services.Unwrap() before calling this method if this Services
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Services) Update() *ServicesUpdateOne {
	return NewServicesClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Services entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Services) Unwrap() *Services {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Services is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Services) String() string {
	var builder strings.Builder
	builder.WriteString("Services(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("service_name=")
	builder.WriteString(s.ServiceName)
	builder.WriteString(", ")
	builder.WriteString("port=")
	builder.WriteString(s.Port)
	builder.WriteByte(')')
	return builder.String()
}

// ServicesSlice is a parsable slice of Services.
type ServicesSlice []*Services
