// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/salukikit/rodentity/ent/project"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Objective holds the value of the "objective" field.
	Objective string `json:"objective,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges ProjectEdges `json:"edges"`
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// Operators holds the value of the operators edge.
	Operators []*Operator `json:"operators,omitempty"`
	// Rodents holds the value of the rodents edge.
	Rodents []*Rodent `json:"rodents,omitempty"`
	// Routers holds the value of the routers edge.
	Routers []*Router `json:"routers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OperatorsOrErr returns the Operators value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) OperatorsOrErr() ([]*Operator, error) {
	if e.loadedTypes[0] {
		return e.Operators, nil
	}
	return nil, &NotLoadedError{edge: "operators"}
}

// RodentsOrErr returns the Rodents value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) RodentsOrErr() ([]*Rodent, error) {
	if e.loadedTypes[1] {
		return e.Rodents, nil
	}
	return nil, &NotLoadedError{edge: "rodents"}
}

// RoutersOrErr returns the Routers value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) RoutersOrErr() ([]*Router, error) {
	if e.loadedTypes[2] {
		return e.Routers, nil
	}
	return nil, &NotLoadedError{edge: "routers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case project.FieldName, project.FieldObjective:
			values[i] = new(sql.NullString)
		case project.FieldEndDate, project.FieldStartDate:
			values[i] = new(sql.NullTime)
		case project.FieldID:
			values[i] = new(xid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Project", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case project.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case project.FieldObjective:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field objective", values[i])
			} else if value.Valid {
				pr.Objective = value.String
			}
		case project.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				pr.EndDate = value.Time
			}
		case project.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				pr.StartDate = value.Time
			}
		}
	}
	return nil
}

// QueryOperators queries the "operators" edge of the Project entity.
func (pr *Project) QueryOperators() *OperatorQuery {
	return NewProjectClient(pr.config).QueryOperators(pr)
}

// QueryRodents queries the "rodents" edge of the Project entity.
func (pr *Project) QueryRodents() *RodentQuery {
	return NewProjectClient(pr.config).QueryRodents(pr)
}

// QueryRouters queries the "routers" edge of the Project entity.
func (pr *Project) QueryRouters() *RouterQuery {
	return NewProjectClient(pr.config).QueryRouters(pr)
}

// Update returns a builder for updating this Project.
// Note that you need to call Project.Unwrap() before calling this method if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return NewProjectClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Project entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("objective=")
	builder.WriteString(pr.Objective)
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(pr.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(pr.StartDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Projects is a parsable slice of Project.
type Projects []*Project
