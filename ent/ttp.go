// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/salukikit/rodentity/ent/ttp"
)

// Ttp is the model entity for the Ttp schema.
type Ttp struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ttp) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ttp.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Ttp", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ttp fields.
func (t *Ttp) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ttp.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this Ttp.
// Note that you need to call Ttp.Unwrap() before calling this method if this Ttp
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Ttp) Update() *TtpUpdateOne {
	return (&TtpClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Ttp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Ttp) Unwrap() *Ttp {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ttp is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Ttp) String() string {
	var builder strings.Builder
	builder.WriteString("Ttp(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Ttps is a parsable slice of Ttp.
type Ttps []*Ttp

func (t Ttps) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
