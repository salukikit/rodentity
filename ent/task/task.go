// Code generated by ent, DO NOT EDIT.

package task

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldXid holds the string denoting the xid field in the database.
	FieldXid = "xid"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldArgs holds the string denoting the args field in the database.
	FieldArgs = "args"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldExecuted holds the string denoting the executed field in the database.
	FieldExecuted = "executed"
	// FieldLooted holds the string denoting the looted field in the database.
	FieldLooted = "looted"
	// FieldRequestedat holds the string denoting the requestedat field in the database.
	FieldRequestedat = "requestedat"
	// FieldCompletedat holds the string denoting the completedat field in the database.
	FieldCompletedat = "completedat"
	// FieldTTPs holds the string denoting the ttps field in the database.
	FieldTTPs = "tt_ps"
	// EdgeRodent holds the string denoting the rodent edge name in mutations.
	EdgeRodent = "rodent"
	// EdgeLoot holds the string denoting the loot edge name in mutations.
	EdgeLoot = "loot"
	// Table holds the table name of the task in the database.
	Table = "tasks"
	// RodentTable is the table that holds the rodent relation/edge.
	RodentTable = "tasks"
	// RodentInverseTable is the table name for the Rodent entity.
	// It exists in this package in order to avoid circular dependency with the "rodent" package.
	RodentInverseTable = "rodents"
	// RodentColumn is the table column denoting the rodent relation/edge.
	RodentColumn = "rodent_tasks"
	// LootTable is the table that holds the loot relation/edge.
	LootTable = "loots"
	// LootInverseTable is the table name for the Loot entity.
	// It exists in this package in order to avoid circular dependency with the "loot" package.
	LootInverseTable = "loots"
	// LootColumn is the table column denoting the loot relation/edge.
	LootColumn = "task_loot"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldXid,
	FieldType,
	FieldArgs,
	FieldData,
	FieldResult,
	FieldExecuted,
	FieldLooted,
	FieldRequestedat,
	FieldCompletedat,
	FieldTTPs,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tasks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"rodent_tasks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
	// DefaultExecuted holds the default value on creation for the "Executed" field.
	DefaultExecuted bool
	// DefaultLooted holds the default value on creation for the "looted" field.
	DefaultLooted bool
)
