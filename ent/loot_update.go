// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/salukikit/rodentity/ent/loot"
	"github.com/salukikit/rodentity/ent/predicate"
	"github.com/salukikit/rodentity/ent/rodent"
	"github.com/salukikit/rodentity/ent/task"
)

// LootUpdate is the builder for updating Loot entities.
type LootUpdate struct {
	config
	hooks    []Hook
	mutation *LootMutation
}

// Where appends a list predicates to the LootUpdate builder.
func (lu *LootUpdate) Where(ps ...predicate.Loot) *LootUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetXid sets the "xid" field.
func (lu *LootUpdate) SetXid(s string) *LootUpdate {
	lu.mutation.SetXid(s)
	return lu
}

// SetType sets the "type" field.
func (lu *LootUpdate) SetType(l loot.Type) *LootUpdate {
	lu.mutation.SetType(l)
	return lu
}

// SetLocation sets the "location" field.
func (lu *LootUpdate) SetLocation(s string) *LootUpdate {
	lu.mutation.SetLocation(s)
	return lu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (lu *LootUpdate) SetNillableLocation(s *string) *LootUpdate {
	if s != nil {
		lu.SetLocation(*s)
	}
	return lu
}

// SetData sets the "data" field.
func (lu *LootUpdate) SetData(b []byte) *LootUpdate {
	lu.mutation.SetData(b)
	return lu
}

// SetCollectedon sets the "collectedon" field.
func (lu *LootUpdate) SetCollectedon(t time.Time) *LootUpdate {
	lu.mutation.SetCollectedon(t)
	return lu
}

// SetRodentID sets the "rodent" edge to the Rodent entity by ID.
func (lu *LootUpdate) SetRodentID(id int) *LootUpdate {
	lu.mutation.SetRodentID(id)
	return lu
}

// SetNillableRodentID sets the "rodent" edge to the Rodent entity by ID if the given value is not nil.
func (lu *LootUpdate) SetNillableRodentID(id *int) *LootUpdate {
	if id != nil {
		lu = lu.SetRodentID(*id)
	}
	return lu
}

// SetRodent sets the "rodent" edge to the Rodent entity.
func (lu *LootUpdate) SetRodent(r *Rodent) *LootUpdate {
	return lu.SetRodentID(r.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (lu *LootUpdate) SetTaskID(id int) *LootUpdate {
	lu.mutation.SetTaskID(id)
	return lu
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (lu *LootUpdate) SetNillableTaskID(id *int) *LootUpdate {
	if id != nil {
		lu = lu.SetTaskID(*id)
	}
	return lu
}

// SetTask sets the "task" edge to the Task entity.
func (lu *LootUpdate) SetTask(t *Task) *LootUpdate {
	return lu.SetTaskID(t.ID)
}

// Mutation returns the LootMutation object of the builder.
func (lu *LootUpdate) Mutation() *LootMutation {
	return lu.mutation
}

// ClearRodent clears the "rodent" edge to the Rodent entity.
func (lu *LootUpdate) ClearRodent() *LootUpdate {
	lu.mutation.ClearRodent()
	return lu
}

// ClearTask clears the "task" edge to the Task entity.
func (lu *LootUpdate) ClearTask() *LootUpdate {
	lu.mutation.ClearTask()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LootUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, LootMutation](ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LootUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LootUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LootUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LootUpdate) check() error {
	if v, ok := lu.mutation.GetType(); ok {
		if err := loot.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Loot.type": %w`, err)}
		}
	}
	return nil
}

func (lu *LootUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(loot.Table, loot.Columns, sqlgraph.NewFieldSpec(loot.FieldID, field.TypeInt))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Xid(); ok {
		_spec.SetField(loot.FieldXid, field.TypeString, value)
	}
	if value, ok := lu.mutation.GetType(); ok {
		_spec.SetField(loot.FieldType, field.TypeEnum, value)
	}
	if value, ok := lu.mutation.Location(); ok {
		_spec.SetField(loot.FieldLocation, field.TypeString, value)
	}
	if value, ok := lu.mutation.Data(); ok {
		_spec.SetField(loot.FieldData, field.TypeBytes, value)
	}
	if value, ok := lu.mutation.Collectedon(); ok {
		_spec.SetField(loot.FieldCollectedon, field.TypeTime, value)
	}
	if lu.mutation.RodentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loot.RodentTable,
			Columns: []string{loot.RodentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rodent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RodentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loot.RodentTable,
			Columns: []string{loot.RodentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rodent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loot.TaskTable,
			Columns: []string{loot.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loot.TaskTable,
			Columns: []string{loot.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LootUpdateOne is the builder for updating a single Loot entity.
type LootUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LootMutation
}

// SetXid sets the "xid" field.
func (luo *LootUpdateOne) SetXid(s string) *LootUpdateOne {
	luo.mutation.SetXid(s)
	return luo
}

// SetType sets the "type" field.
func (luo *LootUpdateOne) SetType(l loot.Type) *LootUpdateOne {
	luo.mutation.SetType(l)
	return luo
}

// SetLocation sets the "location" field.
func (luo *LootUpdateOne) SetLocation(s string) *LootUpdateOne {
	luo.mutation.SetLocation(s)
	return luo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (luo *LootUpdateOne) SetNillableLocation(s *string) *LootUpdateOne {
	if s != nil {
		luo.SetLocation(*s)
	}
	return luo
}

// SetData sets the "data" field.
func (luo *LootUpdateOne) SetData(b []byte) *LootUpdateOne {
	luo.mutation.SetData(b)
	return luo
}

// SetCollectedon sets the "collectedon" field.
func (luo *LootUpdateOne) SetCollectedon(t time.Time) *LootUpdateOne {
	luo.mutation.SetCollectedon(t)
	return luo
}

// SetRodentID sets the "rodent" edge to the Rodent entity by ID.
func (luo *LootUpdateOne) SetRodentID(id int) *LootUpdateOne {
	luo.mutation.SetRodentID(id)
	return luo
}

// SetNillableRodentID sets the "rodent" edge to the Rodent entity by ID if the given value is not nil.
func (luo *LootUpdateOne) SetNillableRodentID(id *int) *LootUpdateOne {
	if id != nil {
		luo = luo.SetRodentID(*id)
	}
	return luo
}

// SetRodent sets the "rodent" edge to the Rodent entity.
func (luo *LootUpdateOne) SetRodent(r *Rodent) *LootUpdateOne {
	return luo.SetRodentID(r.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (luo *LootUpdateOne) SetTaskID(id int) *LootUpdateOne {
	luo.mutation.SetTaskID(id)
	return luo
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (luo *LootUpdateOne) SetNillableTaskID(id *int) *LootUpdateOne {
	if id != nil {
		luo = luo.SetTaskID(*id)
	}
	return luo
}

// SetTask sets the "task" edge to the Task entity.
func (luo *LootUpdateOne) SetTask(t *Task) *LootUpdateOne {
	return luo.SetTaskID(t.ID)
}

// Mutation returns the LootMutation object of the builder.
func (luo *LootUpdateOne) Mutation() *LootMutation {
	return luo.mutation
}

// ClearRodent clears the "rodent" edge to the Rodent entity.
func (luo *LootUpdateOne) ClearRodent() *LootUpdateOne {
	luo.mutation.ClearRodent()
	return luo
}

// ClearTask clears the "task" edge to the Task entity.
func (luo *LootUpdateOne) ClearTask() *LootUpdateOne {
	luo.mutation.ClearTask()
	return luo
}

// Where appends a list predicates to the LootUpdate builder.
func (luo *LootUpdateOne) Where(ps ...predicate.Loot) *LootUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LootUpdateOne) Select(field string, fields ...string) *LootUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Loot entity.
func (luo *LootUpdateOne) Save(ctx context.Context) (*Loot, error) {
	return withHooks[*Loot, LootMutation](ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LootUpdateOne) SaveX(ctx context.Context) *Loot {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LootUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LootUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LootUpdateOne) check() error {
	if v, ok := luo.mutation.GetType(); ok {
		if err := loot.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Loot.type": %w`, err)}
		}
	}
	return nil
}

func (luo *LootUpdateOne) sqlSave(ctx context.Context) (_node *Loot, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(loot.Table, loot.Columns, sqlgraph.NewFieldSpec(loot.FieldID, field.TypeInt))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Loot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loot.FieldID)
		for _, f := range fields {
			if !loot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != loot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Xid(); ok {
		_spec.SetField(loot.FieldXid, field.TypeString, value)
	}
	if value, ok := luo.mutation.GetType(); ok {
		_spec.SetField(loot.FieldType, field.TypeEnum, value)
	}
	if value, ok := luo.mutation.Location(); ok {
		_spec.SetField(loot.FieldLocation, field.TypeString, value)
	}
	if value, ok := luo.mutation.Data(); ok {
		_spec.SetField(loot.FieldData, field.TypeBytes, value)
	}
	if value, ok := luo.mutation.Collectedon(); ok {
		_spec.SetField(loot.FieldCollectedon, field.TypeTime, value)
	}
	if luo.mutation.RodentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loot.RodentTable,
			Columns: []string{loot.RodentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rodent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RodentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loot.RodentTable,
			Columns: []string{loot.RodentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rodent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loot.TaskTable,
			Columns: []string{loot.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loot.TaskTable,
			Columns: []string{loot.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Loot{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
