// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/salukikit/rodentity/ent/device"
	"github.com/salukikit/rodentity/ent/project"
	"github.com/salukikit/rodentity/ent/rodent"
	"github.com/salukikit/rodentity/ent/user"
)

// Rodent is the model entity for the Rodent schema.
type Rodent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Xid holds the value of the "xid" field.
	Xid string `json:"xid,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Codename holds the value of the "codename" field.
	Codename string `json:"codename,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Usercontext holds the value of the "usercontext" field.
	Usercontext string `json:"usercontext,omitempty"`
	// Comms holds the value of the "comms" field.
	Comms string `json:"comms,omitempty"`
	// CommsInspected holds the value of the "comms_inspected" field.
	CommsInspected bool `json:"comms_inspected,omitempty"`
	// Beacontime holds the value of the "beacontime" field.
	Beacontime string `json:"beacontime,omitempty"`
	// Burned holds the value of the "burned" field.
	Burned bool `json:"burned,omitempty"`
	// Alive holds the value of the "alive" field.
	Alive bool `json:"alive,omitempty"`
	// Joined holds the value of the "joined" field.
	Joined time.Time `json:"joined,omitempty"`
	// Lastseen holds the value of the "lastseen" field.
	Lastseen time.Time `json:"lastseen,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RodentQuery when eager-loading is set.
	Edges           RodentEdges `json:"edges"`
	device_rodents  *int
	project_rodents *int
	user_rodents    *int
}

// RodentEdges holds the relations/edges for other nodes in the graph.
type RodentEdges struct {
	// Device holds the value of the device edge.
	Device *Device `json:"device,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// Router holds the value of the router edge.
	Router []*Router `json:"router,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// Loot holds the value of the loot edge.
	Loot []*Loot `json:"loot,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// DeviceOrErr returns the Device value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RodentEdges) DeviceOrErr() (*Device, error) {
	if e.loadedTypes[0] {
		if e.Device == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: device.Label}
		}
		return e.Device, nil
	}
	return nil, &NotLoadedError{edge: "device"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RodentEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RodentEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[2] {
		if e.Project == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// RouterOrErr returns the Router value or an error if the edge
// was not loaded in eager-loading.
func (e RodentEdges) RouterOrErr() ([]*Router, error) {
	if e.loadedTypes[3] {
		return e.Router, nil
	}
	return nil, &NotLoadedError{edge: "router"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e RodentEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[4] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// LootOrErr returns the Loot value or an error if the edge
// was not loaded in eager-loading.
func (e RodentEdges) LootOrErr() ([]*Loot, error) {
	if e.loadedTypes[5] {
		return e.Loot, nil
	}
	return nil, &NotLoadedError{edge: "loot"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rodent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rodent.FieldCommsInspected, rodent.FieldBurned, rodent.FieldAlive:
			values[i] = new(sql.NullBool)
		case rodent.FieldID:
			values[i] = new(sql.NullInt64)
		case rodent.FieldXid, rodent.FieldType, rodent.FieldCodename, rodent.FieldKey, rodent.FieldUsercontext, rodent.FieldComms, rodent.FieldBeacontime:
			values[i] = new(sql.NullString)
		case rodent.FieldJoined, rodent.FieldLastseen:
			values[i] = new(sql.NullTime)
		case rodent.ForeignKeys[0]: // device_rodents
			values[i] = new(sql.NullInt64)
		case rodent.ForeignKeys[1]: // project_rodents
			values[i] = new(sql.NullInt64)
		case rodent.ForeignKeys[2]: // user_rodents
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Rodent", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rodent fields.
func (r *Rodent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rodent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case rodent.FieldXid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field xid", values[i])
			} else if value.Valid {
				r.Xid = value.String
			}
		case rodent.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = value.String
			}
		case rodent.FieldCodename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field codename", values[i])
			} else if value.Valid {
				r.Codename = value.String
			}
		case rodent.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				r.Key = value.String
			}
		case rodent.FieldUsercontext:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field usercontext", values[i])
			} else if value.Valid {
				r.Usercontext = value.String
			}
		case rodent.FieldComms:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comms", values[i])
			} else if value.Valid {
				r.Comms = value.String
			}
		case rodent.FieldCommsInspected:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field comms_inspected", values[i])
			} else if value.Valid {
				r.CommsInspected = value.Bool
			}
		case rodent.FieldBeacontime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field beacontime", values[i])
			} else if value.Valid {
				r.Beacontime = value.String
			}
		case rodent.FieldBurned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field burned", values[i])
			} else if value.Valid {
				r.Burned = value.Bool
			}
		case rodent.FieldAlive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field alive", values[i])
			} else if value.Valid {
				r.Alive = value.Bool
			}
		case rodent.FieldJoined:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field joined", values[i])
			} else if value.Valid {
				r.Joined = value.Time
			}
		case rodent.FieldLastseen:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastseen", values[i])
			} else if value.Valid {
				r.Lastseen = value.Time
			}
		case rodent.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field device_rodents", value)
			} else if value.Valid {
				r.device_rodents = new(int)
				*r.device_rodents = int(value.Int64)
			}
		case rodent.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_rodents", value)
			} else if value.Valid {
				r.project_rodents = new(int)
				*r.project_rodents = int(value.Int64)
			}
		case rodent.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_rodents", value)
			} else if value.Valid {
				r.user_rodents = new(int)
				*r.user_rodents = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDevice queries the "device" edge of the Rodent entity.
func (r *Rodent) QueryDevice() *DeviceQuery {
	return NewRodentClient(r.config).QueryDevice(r)
}

// QueryUser queries the "user" edge of the Rodent entity.
func (r *Rodent) QueryUser() *UserQuery {
	return NewRodentClient(r.config).QueryUser(r)
}

// QueryProject queries the "project" edge of the Rodent entity.
func (r *Rodent) QueryProject() *ProjectQuery {
	return NewRodentClient(r.config).QueryProject(r)
}

// QueryRouter queries the "router" edge of the Rodent entity.
func (r *Rodent) QueryRouter() *RouterQuery {
	return NewRodentClient(r.config).QueryRouter(r)
}

// QueryTasks queries the "tasks" edge of the Rodent entity.
func (r *Rodent) QueryTasks() *TaskQuery {
	return NewRodentClient(r.config).QueryTasks(r)
}

// QueryLoot queries the "loot" edge of the Rodent entity.
func (r *Rodent) QueryLoot() *LootQuery {
	return NewRodentClient(r.config).QueryLoot(r)
}

// Update returns a builder for updating this Rodent.
// Note that you need to call Rodent.Unwrap() before calling this method if this Rodent
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rodent) Update() *RodentUpdateOne {
	return NewRodentClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Rodent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Rodent) Unwrap() *Rodent {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rodent is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rodent) String() string {
	var builder strings.Builder
	builder.WriteString("Rodent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("xid=")
	builder.WriteString(r.Xid)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(r.Type)
	builder.WriteString(", ")
	builder.WriteString("codename=")
	builder.WriteString(r.Codename)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(r.Key)
	builder.WriteString(", ")
	builder.WriteString("usercontext=")
	builder.WriteString(r.Usercontext)
	builder.WriteString(", ")
	builder.WriteString("comms=")
	builder.WriteString(r.Comms)
	builder.WriteString(", ")
	builder.WriteString("comms_inspected=")
	builder.WriteString(fmt.Sprintf("%v", r.CommsInspected))
	builder.WriteString(", ")
	builder.WriteString("beacontime=")
	builder.WriteString(r.Beacontime)
	builder.WriteString(", ")
	builder.WriteString("burned=")
	builder.WriteString(fmt.Sprintf("%v", r.Burned))
	builder.WriteString(", ")
	builder.WriteString("alive=")
	builder.WriteString(fmt.Sprintf("%v", r.Alive))
	builder.WriteString(", ")
	builder.WriteString("joined=")
	builder.WriteString(r.Joined.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("lastseen=")
	builder.WriteString(r.Lastseen.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Rodents is a parsable slice of Rodent.
type Rodents []*Rodent
