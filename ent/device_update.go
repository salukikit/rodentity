// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/salukikit/rodentity/ent/device"
	"github.com/salukikit/rodentity/ent/domain"
	"github.com/salukikit/rodentity/ent/group"
	"github.com/salukikit/rodentity/ent/predicate"
	"github.com/salukikit/rodentity/ent/rodent"
	"github.com/salukikit/rodentity/ent/services"
	"github.com/salukikit/rodentity/ent/subnet"
	"github.com/salukikit/rodentity/ent/user"
)

// DeviceUpdate is the builder for updating Device entities.
type DeviceUpdate struct {
	config
	hooks    []Hook
	mutation *DeviceMutation
}

// Where appends a list predicates to the DeviceUpdate builder.
func (du *DeviceUpdate) Where(ps ...predicate.Device) *DeviceUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetHostname sets the "hostname" field.
func (du *DeviceUpdate) SetHostname(s string) *DeviceUpdate {
	du.mutation.SetHostname(s)
	return du
}

// SetOs sets the "os" field.
func (du *DeviceUpdate) SetOs(s string) *DeviceUpdate {
	du.mutation.SetOs(s)
	return du
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableOs(s *string) *DeviceUpdate {
	if s != nil {
		du.SetOs(*s)
	}
	return du
}

// SetArch sets the "arch" field.
func (du *DeviceUpdate) SetArch(s string) *DeviceUpdate {
	du.mutation.SetArch(s)
	return du
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableArch(s *string) *DeviceUpdate {
	if s != nil {
		du.SetArch(*s)
	}
	return du
}

// SetVersion sets the "version" field.
func (du *DeviceUpdate) SetVersion(s string) *DeviceUpdate {
	du.mutation.SetVersion(s)
	return du
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableVersion(s *string) *DeviceUpdate {
	if s != nil {
		du.SetVersion(*s)
	}
	return du
}

// SetNetInterfaces sets the "net_interfaces" field.
func (du *DeviceUpdate) SetNetInterfaces(s []string) *DeviceUpdate {
	du.mutation.SetNetInterfaces(s)
	return du
}

// AppendNetInterfaces appends s to the "net_interfaces" field.
func (du *DeviceUpdate) AppendNetInterfaces(s []string) *DeviceUpdate {
	du.mutation.AppendNetInterfaces(s)
	return du
}

// ClearNetInterfaces clears the value of the "net_interfaces" field.
func (du *DeviceUpdate) ClearNetInterfaces() *DeviceUpdate {
	du.mutation.ClearNetInterfaces()
	return du
}

// SetMachinepass sets the "machinepass" field.
func (du *DeviceUpdate) SetMachinepass(s string) *DeviceUpdate {
	du.mutation.SetMachinepass(s)
	return du
}

// SetNillableMachinepass sets the "machinepass" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableMachinepass(s *string) *DeviceUpdate {
	if s != nil {
		du.SetMachinepass(*s)
	}
	return du
}

// ClearMachinepass clears the value of the "machinepass" field.
func (du *DeviceUpdate) ClearMachinepass() *DeviceUpdate {
	du.mutation.ClearMachinepass()
	return du
}

// SetCertificates sets the "certificates" field.
func (du *DeviceUpdate) SetCertificates(s []string) *DeviceUpdate {
	du.mutation.SetCertificates(s)
	return du
}

// AppendCertificates appends s to the "certificates" field.
func (du *DeviceUpdate) AppendCertificates(s []string) *DeviceUpdate {
	du.mutation.AppendCertificates(s)
	return du
}

// ClearCertificates clears the value of the "certificates" field.
func (du *DeviceUpdate) ClearCertificates() *DeviceUpdate {
	du.mutation.ClearCertificates()
	return du
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (du *DeviceUpdate) AddUserIDs(ids ...xid.ID) *DeviceUpdate {
	du.mutation.AddUserIDs(ids...)
	return du
}

// AddUsers adds the "users" edges to the User entity.
func (du *DeviceUpdate) AddUsers(u ...*User) *DeviceUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return du.AddUserIDs(ids...)
}

// AddRodentIDs adds the "rodents" edge to the Rodent entity by IDs.
func (du *DeviceUpdate) AddRodentIDs(ids ...xid.ID) *DeviceUpdate {
	du.mutation.AddRodentIDs(ids...)
	return du
}

// AddRodents adds the "rodents" edges to the Rodent entity.
func (du *DeviceUpdate) AddRodents(r ...*Rodent) *DeviceUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return du.AddRodentIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (du *DeviceUpdate) AddGroupIDs(ids ...xid.ID) *DeviceUpdate {
	du.mutation.AddGroupIDs(ids...)
	return du
}

// AddGroups adds the "groups" edges to the Group entity.
func (du *DeviceUpdate) AddGroups(g ...*Group) *DeviceUpdate {
	ids := make([]xid.ID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return du.AddGroupIDs(ids...)
}

// SetDomainID sets the "domain" edge to the Domain entity by ID.
func (du *DeviceUpdate) SetDomainID(id xid.ID) *DeviceUpdate {
	du.mutation.SetDomainID(id)
	return du
}

// SetNillableDomainID sets the "domain" edge to the Domain entity by ID if the given value is not nil.
func (du *DeviceUpdate) SetNillableDomainID(id *xid.ID) *DeviceUpdate {
	if id != nil {
		du = du.SetDomainID(*id)
	}
	return du
}

// SetDomain sets the "domain" edge to the Domain entity.
func (du *DeviceUpdate) SetDomain(d *Domain) *DeviceUpdate {
	return du.SetDomainID(d.ID)
}

// AddSubnetIDs adds the "subnets" edge to the Subnet entity by IDs.
func (du *DeviceUpdate) AddSubnetIDs(ids ...xid.ID) *DeviceUpdate {
	du.mutation.AddSubnetIDs(ids...)
	return du
}

// AddSubnets adds the "subnets" edges to the Subnet entity.
func (du *DeviceUpdate) AddSubnets(s ...*Subnet) *DeviceUpdate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return du.AddSubnetIDs(ids...)
}

// AddServiceIDs adds the "services" edge to the Services entity by IDs.
func (du *DeviceUpdate) AddServiceIDs(ids ...int) *DeviceUpdate {
	du.mutation.AddServiceIDs(ids...)
	return du
}

// AddServices adds the "services" edges to the Services entity.
func (du *DeviceUpdate) AddServices(s ...*Services) *DeviceUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return du.AddServiceIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (du *DeviceUpdate) Mutation() *DeviceMutation {
	return du.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (du *DeviceUpdate) ClearUsers() *DeviceUpdate {
	du.mutation.ClearUsers()
	return du
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (du *DeviceUpdate) RemoveUserIDs(ids ...xid.ID) *DeviceUpdate {
	du.mutation.RemoveUserIDs(ids...)
	return du
}

// RemoveUsers removes "users" edges to User entities.
func (du *DeviceUpdate) RemoveUsers(u ...*User) *DeviceUpdate {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return du.RemoveUserIDs(ids...)
}

// ClearRodents clears all "rodents" edges to the Rodent entity.
func (du *DeviceUpdate) ClearRodents() *DeviceUpdate {
	du.mutation.ClearRodents()
	return du
}

// RemoveRodentIDs removes the "rodents" edge to Rodent entities by IDs.
func (du *DeviceUpdate) RemoveRodentIDs(ids ...xid.ID) *DeviceUpdate {
	du.mutation.RemoveRodentIDs(ids...)
	return du
}

// RemoveRodents removes "rodents" edges to Rodent entities.
func (du *DeviceUpdate) RemoveRodents(r ...*Rodent) *DeviceUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return du.RemoveRodentIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (du *DeviceUpdate) ClearGroups() *DeviceUpdate {
	du.mutation.ClearGroups()
	return du
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (du *DeviceUpdate) RemoveGroupIDs(ids ...xid.ID) *DeviceUpdate {
	du.mutation.RemoveGroupIDs(ids...)
	return du
}

// RemoveGroups removes "groups" edges to Group entities.
func (du *DeviceUpdate) RemoveGroups(g ...*Group) *DeviceUpdate {
	ids := make([]xid.ID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return du.RemoveGroupIDs(ids...)
}

// ClearDomain clears the "domain" edge to the Domain entity.
func (du *DeviceUpdate) ClearDomain() *DeviceUpdate {
	du.mutation.ClearDomain()
	return du
}

// ClearSubnets clears all "subnets" edges to the Subnet entity.
func (du *DeviceUpdate) ClearSubnets() *DeviceUpdate {
	du.mutation.ClearSubnets()
	return du
}

// RemoveSubnetIDs removes the "subnets" edge to Subnet entities by IDs.
func (du *DeviceUpdate) RemoveSubnetIDs(ids ...xid.ID) *DeviceUpdate {
	du.mutation.RemoveSubnetIDs(ids...)
	return du
}

// RemoveSubnets removes "subnets" edges to Subnet entities.
func (du *DeviceUpdate) RemoveSubnets(s ...*Subnet) *DeviceUpdate {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return du.RemoveSubnetIDs(ids...)
}

// ClearServices clears all "services" edges to the Services entity.
func (du *DeviceUpdate) ClearServices() *DeviceUpdate {
	du.mutation.ClearServices()
	return du
}

// RemoveServiceIDs removes the "services" edge to Services entities by IDs.
func (du *DeviceUpdate) RemoveServiceIDs(ids ...int) *DeviceUpdate {
	du.mutation.RemoveServiceIDs(ids...)
	return du
}

// RemoveServices removes "services" edges to Services entities.
func (du *DeviceUpdate) RemoveServices(s ...*Services) *DeviceUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return du.RemoveServiceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DeviceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, DeviceMutation](ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeviceUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeviceUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeviceUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DeviceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(device.Table, device.Columns, sqlgraph.NewFieldSpec(device.FieldID, field.TypeString))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Hostname(); ok {
		_spec.SetField(device.FieldHostname, field.TypeString, value)
	}
	if value, ok := du.mutation.Os(); ok {
		_spec.SetField(device.FieldOs, field.TypeString, value)
	}
	if value, ok := du.mutation.Arch(); ok {
		_spec.SetField(device.FieldArch, field.TypeString, value)
	}
	if value, ok := du.mutation.Version(); ok {
		_spec.SetField(device.FieldVersion, field.TypeString, value)
	}
	if value, ok := du.mutation.NetInterfaces(); ok {
		_spec.SetField(device.FieldNetInterfaces, field.TypeJSON, value)
	}
	if value, ok := du.mutation.AppendedNetInterfaces(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, device.FieldNetInterfaces, value)
		})
	}
	if du.mutation.NetInterfacesCleared() {
		_spec.ClearField(device.FieldNetInterfaces, field.TypeJSON)
	}
	if value, ok := du.mutation.Machinepass(); ok {
		_spec.SetField(device.FieldMachinepass, field.TypeString, value)
	}
	if du.mutation.MachinepassCleared() {
		_spec.ClearField(device.FieldMachinepass, field.TypeString)
	}
	if value, ok := du.mutation.Certificates(); ok {
		_spec.SetField(device.FieldCertificates, field.TypeJSON, value)
	}
	if value, ok := du.mutation.AppendedCertificates(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, device.FieldCertificates, value)
		})
	}
	if du.mutation.CertificatesCleared() {
		_spec.ClearField(device.FieldCertificates, field.TypeJSON)
	}
	if du.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   device.UsersTable,
			Columns: device.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedUsersIDs(); len(nodes) > 0 && !du.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   device.UsersTable,
			Columns: device.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   device.UsersTable,
			Columns: device.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.RodentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.RodentsTable,
			Columns: []string{device.RodentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: rodent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedRodentsIDs(); len(nodes) > 0 && !du.mutation.RodentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.RodentsTable,
			Columns: []string{device.RodentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: rodent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RodentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.RodentsTable,
			Columns: []string{device.RodentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: rodent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   device.GroupsTable,
			Columns: device.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !du.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   device.GroupsTable,
			Columns: device.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   device.GroupsTable,
			Columns: device.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.DomainTable,
			Columns: []string{device.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: domain.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.DomainTable,
			Columns: []string{device.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: domain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.SubnetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   device.SubnetsTable,
			Columns: device.SubnetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: subnet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedSubnetsIDs(); len(nodes) > 0 && !du.mutation.SubnetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   device.SubnetsTable,
			Columns: device.SubnetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: subnet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.SubnetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   device.SubnetsTable,
			Columns: device.SubnetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: subnet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   device.ServicesTable,
			Columns: device.ServicesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: services.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedServicesIDs(); len(nodes) > 0 && !du.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   device.ServicesTable,
			Columns: device.ServicesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: services.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   device.ServicesTable,
			Columns: device.ServicesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: services.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DeviceUpdateOne is the builder for updating a single Device entity.
type DeviceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeviceMutation
}

// SetHostname sets the "hostname" field.
func (duo *DeviceUpdateOne) SetHostname(s string) *DeviceUpdateOne {
	duo.mutation.SetHostname(s)
	return duo
}

// SetOs sets the "os" field.
func (duo *DeviceUpdateOne) SetOs(s string) *DeviceUpdateOne {
	duo.mutation.SetOs(s)
	return duo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableOs(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetOs(*s)
	}
	return duo
}

// SetArch sets the "arch" field.
func (duo *DeviceUpdateOne) SetArch(s string) *DeviceUpdateOne {
	duo.mutation.SetArch(s)
	return duo
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableArch(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetArch(*s)
	}
	return duo
}

// SetVersion sets the "version" field.
func (duo *DeviceUpdateOne) SetVersion(s string) *DeviceUpdateOne {
	duo.mutation.SetVersion(s)
	return duo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableVersion(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetVersion(*s)
	}
	return duo
}

// SetNetInterfaces sets the "net_interfaces" field.
func (duo *DeviceUpdateOne) SetNetInterfaces(s []string) *DeviceUpdateOne {
	duo.mutation.SetNetInterfaces(s)
	return duo
}

// AppendNetInterfaces appends s to the "net_interfaces" field.
func (duo *DeviceUpdateOne) AppendNetInterfaces(s []string) *DeviceUpdateOne {
	duo.mutation.AppendNetInterfaces(s)
	return duo
}

// ClearNetInterfaces clears the value of the "net_interfaces" field.
func (duo *DeviceUpdateOne) ClearNetInterfaces() *DeviceUpdateOne {
	duo.mutation.ClearNetInterfaces()
	return duo
}

// SetMachinepass sets the "machinepass" field.
func (duo *DeviceUpdateOne) SetMachinepass(s string) *DeviceUpdateOne {
	duo.mutation.SetMachinepass(s)
	return duo
}

// SetNillableMachinepass sets the "machinepass" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableMachinepass(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetMachinepass(*s)
	}
	return duo
}

// ClearMachinepass clears the value of the "machinepass" field.
func (duo *DeviceUpdateOne) ClearMachinepass() *DeviceUpdateOne {
	duo.mutation.ClearMachinepass()
	return duo
}

// SetCertificates sets the "certificates" field.
func (duo *DeviceUpdateOne) SetCertificates(s []string) *DeviceUpdateOne {
	duo.mutation.SetCertificates(s)
	return duo
}

// AppendCertificates appends s to the "certificates" field.
func (duo *DeviceUpdateOne) AppendCertificates(s []string) *DeviceUpdateOne {
	duo.mutation.AppendCertificates(s)
	return duo
}

// ClearCertificates clears the value of the "certificates" field.
func (duo *DeviceUpdateOne) ClearCertificates() *DeviceUpdateOne {
	duo.mutation.ClearCertificates()
	return duo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (duo *DeviceUpdateOne) AddUserIDs(ids ...xid.ID) *DeviceUpdateOne {
	duo.mutation.AddUserIDs(ids...)
	return duo
}

// AddUsers adds the "users" edges to the User entity.
func (duo *DeviceUpdateOne) AddUsers(u ...*User) *DeviceUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duo.AddUserIDs(ids...)
}

// AddRodentIDs adds the "rodents" edge to the Rodent entity by IDs.
func (duo *DeviceUpdateOne) AddRodentIDs(ids ...xid.ID) *DeviceUpdateOne {
	duo.mutation.AddRodentIDs(ids...)
	return duo
}

// AddRodents adds the "rodents" edges to the Rodent entity.
func (duo *DeviceUpdateOne) AddRodents(r ...*Rodent) *DeviceUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return duo.AddRodentIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (duo *DeviceUpdateOne) AddGroupIDs(ids ...xid.ID) *DeviceUpdateOne {
	duo.mutation.AddGroupIDs(ids...)
	return duo
}

// AddGroups adds the "groups" edges to the Group entity.
func (duo *DeviceUpdateOne) AddGroups(g ...*Group) *DeviceUpdateOne {
	ids := make([]xid.ID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return duo.AddGroupIDs(ids...)
}

// SetDomainID sets the "domain" edge to the Domain entity by ID.
func (duo *DeviceUpdateOne) SetDomainID(id xid.ID) *DeviceUpdateOne {
	duo.mutation.SetDomainID(id)
	return duo
}

// SetNillableDomainID sets the "domain" edge to the Domain entity by ID if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableDomainID(id *xid.ID) *DeviceUpdateOne {
	if id != nil {
		duo = duo.SetDomainID(*id)
	}
	return duo
}

// SetDomain sets the "domain" edge to the Domain entity.
func (duo *DeviceUpdateOne) SetDomain(d *Domain) *DeviceUpdateOne {
	return duo.SetDomainID(d.ID)
}

// AddSubnetIDs adds the "subnets" edge to the Subnet entity by IDs.
func (duo *DeviceUpdateOne) AddSubnetIDs(ids ...xid.ID) *DeviceUpdateOne {
	duo.mutation.AddSubnetIDs(ids...)
	return duo
}

// AddSubnets adds the "subnets" edges to the Subnet entity.
func (duo *DeviceUpdateOne) AddSubnets(s ...*Subnet) *DeviceUpdateOne {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return duo.AddSubnetIDs(ids...)
}

// AddServiceIDs adds the "services" edge to the Services entity by IDs.
func (duo *DeviceUpdateOne) AddServiceIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.AddServiceIDs(ids...)
	return duo
}

// AddServices adds the "services" edges to the Services entity.
func (duo *DeviceUpdateOne) AddServices(s ...*Services) *DeviceUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return duo.AddServiceIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (duo *DeviceUpdateOne) Mutation() *DeviceMutation {
	return duo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (duo *DeviceUpdateOne) ClearUsers() *DeviceUpdateOne {
	duo.mutation.ClearUsers()
	return duo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (duo *DeviceUpdateOne) RemoveUserIDs(ids ...xid.ID) *DeviceUpdateOne {
	duo.mutation.RemoveUserIDs(ids...)
	return duo
}

// RemoveUsers removes "users" edges to User entities.
func (duo *DeviceUpdateOne) RemoveUsers(u ...*User) *DeviceUpdateOne {
	ids := make([]xid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duo.RemoveUserIDs(ids...)
}

// ClearRodents clears all "rodents" edges to the Rodent entity.
func (duo *DeviceUpdateOne) ClearRodents() *DeviceUpdateOne {
	duo.mutation.ClearRodents()
	return duo
}

// RemoveRodentIDs removes the "rodents" edge to Rodent entities by IDs.
func (duo *DeviceUpdateOne) RemoveRodentIDs(ids ...xid.ID) *DeviceUpdateOne {
	duo.mutation.RemoveRodentIDs(ids...)
	return duo
}

// RemoveRodents removes "rodents" edges to Rodent entities.
func (duo *DeviceUpdateOne) RemoveRodents(r ...*Rodent) *DeviceUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return duo.RemoveRodentIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (duo *DeviceUpdateOne) ClearGroups() *DeviceUpdateOne {
	duo.mutation.ClearGroups()
	return duo
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (duo *DeviceUpdateOne) RemoveGroupIDs(ids ...xid.ID) *DeviceUpdateOne {
	duo.mutation.RemoveGroupIDs(ids...)
	return duo
}

// RemoveGroups removes "groups" edges to Group entities.
func (duo *DeviceUpdateOne) RemoveGroups(g ...*Group) *DeviceUpdateOne {
	ids := make([]xid.ID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return duo.RemoveGroupIDs(ids...)
}

// ClearDomain clears the "domain" edge to the Domain entity.
func (duo *DeviceUpdateOne) ClearDomain() *DeviceUpdateOne {
	duo.mutation.ClearDomain()
	return duo
}

// ClearSubnets clears all "subnets" edges to the Subnet entity.
func (duo *DeviceUpdateOne) ClearSubnets() *DeviceUpdateOne {
	duo.mutation.ClearSubnets()
	return duo
}

// RemoveSubnetIDs removes the "subnets" edge to Subnet entities by IDs.
func (duo *DeviceUpdateOne) RemoveSubnetIDs(ids ...xid.ID) *DeviceUpdateOne {
	duo.mutation.RemoveSubnetIDs(ids...)
	return duo
}

// RemoveSubnets removes "subnets" edges to Subnet entities.
func (duo *DeviceUpdateOne) RemoveSubnets(s ...*Subnet) *DeviceUpdateOne {
	ids := make([]xid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return duo.RemoveSubnetIDs(ids...)
}

// ClearServices clears all "services" edges to the Services entity.
func (duo *DeviceUpdateOne) ClearServices() *DeviceUpdateOne {
	duo.mutation.ClearServices()
	return duo
}

// RemoveServiceIDs removes the "services" edge to Services entities by IDs.
func (duo *DeviceUpdateOne) RemoveServiceIDs(ids ...int) *DeviceUpdateOne {
	duo.mutation.RemoveServiceIDs(ids...)
	return duo
}

// RemoveServices removes "services" edges to Services entities.
func (duo *DeviceUpdateOne) RemoveServices(s ...*Services) *DeviceUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return duo.RemoveServiceIDs(ids...)
}

// Where appends a list predicates to the DeviceUpdate builder.
func (duo *DeviceUpdateOne) Where(ps ...predicate.Device) *DeviceUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DeviceUpdateOne) Select(field string, fields ...string) *DeviceUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Device entity.
func (duo *DeviceUpdateOne) Save(ctx context.Context) (*Device, error) {
	return withHooks[*Device, DeviceMutation](ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeviceUpdateOne) SaveX(ctx context.Context) *Device {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DeviceUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeviceUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DeviceUpdateOne) sqlSave(ctx context.Context) (_node *Device, err error) {
	_spec := sqlgraph.NewUpdateSpec(device.Table, device.Columns, sqlgraph.NewFieldSpec(device.FieldID, field.TypeString))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Device.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, device.FieldID)
		for _, f := range fields {
			if !device.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != device.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Hostname(); ok {
		_spec.SetField(device.FieldHostname, field.TypeString, value)
	}
	if value, ok := duo.mutation.Os(); ok {
		_spec.SetField(device.FieldOs, field.TypeString, value)
	}
	if value, ok := duo.mutation.Arch(); ok {
		_spec.SetField(device.FieldArch, field.TypeString, value)
	}
	if value, ok := duo.mutation.Version(); ok {
		_spec.SetField(device.FieldVersion, field.TypeString, value)
	}
	if value, ok := duo.mutation.NetInterfaces(); ok {
		_spec.SetField(device.FieldNetInterfaces, field.TypeJSON, value)
	}
	if value, ok := duo.mutation.AppendedNetInterfaces(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, device.FieldNetInterfaces, value)
		})
	}
	if duo.mutation.NetInterfacesCleared() {
		_spec.ClearField(device.FieldNetInterfaces, field.TypeJSON)
	}
	if value, ok := duo.mutation.Machinepass(); ok {
		_spec.SetField(device.FieldMachinepass, field.TypeString, value)
	}
	if duo.mutation.MachinepassCleared() {
		_spec.ClearField(device.FieldMachinepass, field.TypeString)
	}
	if value, ok := duo.mutation.Certificates(); ok {
		_spec.SetField(device.FieldCertificates, field.TypeJSON, value)
	}
	if value, ok := duo.mutation.AppendedCertificates(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, device.FieldCertificates, value)
		})
	}
	if duo.mutation.CertificatesCleared() {
		_spec.ClearField(device.FieldCertificates, field.TypeJSON)
	}
	if duo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   device.UsersTable,
			Columns: device.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !duo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   device.UsersTable,
			Columns: device.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   device.UsersTable,
			Columns: device.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.RodentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.RodentsTable,
			Columns: []string{device.RodentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: rodent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedRodentsIDs(); len(nodes) > 0 && !duo.mutation.RodentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.RodentsTable,
			Columns: []string{device.RodentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: rodent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RodentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.RodentsTable,
			Columns: []string{device.RodentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: rodent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   device.GroupsTable,
			Columns: device.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !duo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   device.GroupsTable,
			Columns: device.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   device.GroupsTable,
			Columns: device.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.DomainTable,
			Columns: []string{device.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: domain.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.DomainTable,
			Columns: []string{device.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: domain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.SubnetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   device.SubnetsTable,
			Columns: device.SubnetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: subnet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedSubnetsIDs(); len(nodes) > 0 && !duo.mutation.SubnetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   device.SubnetsTable,
			Columns: device.SubnetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: subnet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.SubnetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   device.SubnetsTable,
			Columns: device.SubnetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: subnet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   device.ServicesTable,
			Columns: device.ServicesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: services.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedServicesIDs(); len(nodes) > 0 && !duo.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   device.ServicesTable,
			Columns: device.ServicesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: services.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   device.ServicesTable,
			Columns: device.ServicesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: services.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Device{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
