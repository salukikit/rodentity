// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
	"github.com/salukikit/rodentity/ent/device"
	"github.com/salukikit/rodentity/ent/predicate"
	"github.com/salukikit/rodentity/ent/subnet"
)

// SubnetUpdate is the builder for updating Subnet entities.
type SubnetUpdate struct {
	config
	hooks    []Hook
	mutation *SubnetMutation
}

// Where appends a list predicates to the SubnetUpdate builder.
func (su *SubnetUpdate) Where(ps ...predicate.Subnet) *SubnetUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCidr sets the "cidr" field.
func (su *SubnetUpdate) SetCidr(s string) *SubnetUpdate {
	su.mutation.SetCidr(s)
	return su
}

// SetMask sets the "mask" field.
func (su *SubnetUpdate) SetMask(b []byte) *SubnetUpdate {
	su.mutation.SetMask(b)
	return su
}

// ClearMask clears the value of the "mask" field.
func (su *SubnetUpdate) ClearMask() *SubnetUpdate {
	su.mutation.ClearMask()
	return su
}

// SetOutboundTcpports sets the "outbound_tcpports" field.
func (su *SubnetUpdate) SetOutboundTcpports(s []string) *SubnetUpdate {
	su.mutation.SetOutboundTcpports(s)
	return su
}

// AppendOutboundTcpports appends s to the "outbound_tcpports" field.
func (su *SubnetUpdate) AppendOutboundTcpports(s []string) *SubnetUpdate {
	su.mutation.AppendOutboundTcpports(s)
	return su
}

// ClearOutboundTcpports clears the value of the "outbound_tcpports" field.
func (su *SubnetUpdate) ClearOutboundTcpports() *SubnetUpdate {
	su.mutation.ClearOutboundTcpports()
	return su
}

// SetOutboundUdpports sets the "outbound_udpports" field.
func (su *SubnetUpdate) SetOutboundUdpports(s []string) *SubnetUpdate {
	su.mutation.SetOutboundUdpports(s)
	return su
}

// AppendOutboundUdpports appends s to the "outbound_udpports" field.
func (su *SubnetUpdate) AppendOutboundUdpports(s []string) *SubnetUpdate {
	su.mutation.AppendOutboundUdpports(s)
	return su
}

// ClearOutboundUdpports clears the value of the "outbound_udpports" field.
func (su *SubnetUpdate) ClearOutboundUdpports() *SubnetUpdate {
	su.mutation.ClearOutboundUdpports()
	return su
}

// SetProxy sets the "proxy" field.
func (su *SubnetUpdate) SetProxy(b bool) *SubnetUpdate {
	su.mutation.SetProxy(b)
	return su
}

// SetNillableProxy sets the "proxy" field if the given value is not nil.
func (su *SubnetUpdate) SetNillableProxy(b *bool) *SubnetUpdate {
	if b != nil {
		su.SetProxy(*b)
	}
	return su
}

// ClearProxy clears the value of the "proxy" field.
func (su *SubnetUpdate) ClearProxy() *SubnetUpdate {
	su.mutation.ClearProxy()
	return su
}

// AddHostIDs adds the "hosts" edge to the Device entity by IDs.
func (su *SubnetUpdate) AddHostIDs(ids ...xid.ID) *SubnetUpdate {
	su.mutation.AddHostIDs(ids...)
	return su
}

// AddHosts adds the "hosts" edges to the Device entity.
func (su *SubnetUpdate) AddHosts(d ...*Device) *SubnetUpdate {
	ids := make([]xid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return su.AddHostIDs(ids...)
}

// Mutation returns the SubnetMutation object of the builder.
func (su *SubnetUpdate) Mutation() *SubnetMutation {
	return su.mutation
}

// ClearHosts clears all "hosts" edges to the Device entity.
func (su *SubnetUpdate) ClearHosts() *SubnetUpdate {
	su.mutation.ClearHosts()
	return su
}

// RemoveHostIDs removes the "hosts" edge to Device entities by IDs.
func (su *SubnetUpdate) RemoveHostIDs(ids ...xid.ID) *SubnetUpdate {
	su.mutation.RemoveHostIDs(ids...)
	return su
}

// RemoveHosts removes "hosts" edges to Device entities.
func (su *SubnetUpdate) RemoveHosts(d ...*Device) *SubnetUpdate {
	ids := make([]xid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return su.RemoveHostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubnetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, SubnetMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubnetUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubnetUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubnetUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SubnetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(subnet.Table, subnet.Columns, sqlgraph.NewFieldSpec(subnet.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Cidr(); ok {
		_spec.SetField(subnet.FieldCidr, field.TypeString, value)
	}
	if value, ok := su.mutation.Mask(); ok {
		_spec.SetField(subnet.FieldMask, field.TypeBytes, value)
	}
	if su.mutation.MaskCleared() {
		_spec.ClearField(subnet.FieldMask, field.TypeBytes)
	}
	if value, ok := su.mutation.OutboundTcpports(); ok {
		_spec.SetField(subnet.FieldOutboundTcpports, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedOutboundTcpports(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subnet.FieldOutboundTcpports, value)
		})
	}
	if su.mutation.OutboundTcpportsCleared() {
		_spec.ClearField(subnet.FieldOutboundTcpports, field.TypeJSON)
	}
	if value, ok := su.mutation.OutboundUdpports(); ok {
		_spec.SetField(subnet.FieldOutboundUdpports, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedOutboundUdpports(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subnet.FieldOutboundUdpports, value)
		})
	}
	if su.mutation.OutboundUdpportsCleared() {
		_spec.ClearField(subnet.FieldOutboundUdpports, field.TypeJSON)
	}
	if value, ok := su.mutation.Proxy(); ok {
		_spec.SetField(subnet.FieldProxy, field.TypeBool, value)
	}
	if su.mutation.ProxyCleared() {
		_spec.ClearField(subnet.FieldProxy, field.TypeBool)
	}
	if su.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subnet.HostsTable,
			Columns: subnet.HostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: device.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedHostsIDs(); len(nodes) > 0 && !su.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subnet.HostsTable,
			Columns: subnet.HostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.HostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subnet.HostsTable,
			Columns: subnet.HostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subnet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubnetUpdateOne is the builder for updating a single Subnet entity.
type SubnetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubnetMutation
}

// SetCidr sets the "cidr" field.
func (suo *SubnetUpdateOne) SetCidr(s string) *SubnetUpdateOne {
	suo.mutation.SetCidr(s)
	return suo
}

// SetMask sets the "mask" field.
func (suo *SubnetUpdateOne) SetMask(b []byte) *SubnetUpdateOne {
	suo.mutation.SetMask(b)
	return suo
}

// ClearMask clears the value of the "mask" field.
func (suo *SubnetUpdateOne) ClearMask() *SubnetUpdateOne {
	suo.mutation.ClearMask()
	return suo
}

// SetOutboundTcpports sets the "outbound_tcpports" field.
func (suo *SubnetUpdateOne) SetOutboundTcpports(s []string) *SubnetUpdateOne {
	suo.mutation.SetOutboundTcpports(s)
	return suo
}

// AppendOutboundTcpports appends s to the "outbound_tcpports" field.
func (suo *SubnetUpdateOne) AppendOutboundTcpports(s []string) *SubnetUpdateOne {
	suo.mutation.AppendOutboundTcpports(s)
	return suo
}

// ClearOutboundTcpports clears the value of the "outbound_tcpports" field.
func (suo *SubnetUpdateOne) ClearOutboundTcpports() *SubnetUpdateOne {
	suo.mutation.ClearOutboundTcpports()
	return suo
}

// SetOutboundUdpports sets the "outbound_udpports" field.
func (suo *SubnetUpdateOne) SetOutboundUdpports(s []string) *SubnetUpdateOne {
	suo.mutation.SetOutboundUdpports(s)
	return suo
}

// AppendOutboundUdpports appends s to the "outbound_udpports" field.
func (suo *SubnetUpdateOne) AppendOutboundUdpports(s []string) *SubnetUpdateOne {
	suo.mutation.AppendOutboundUdpports(s)
	return suo
}

// ClearOutboundUdpports clears the value of the "outbound_udpports" field.
func (suo *SubnetUpdateOne) ClearOutboundUdpports() *SubnetUpdateOne {
	suo.mutation.ClearOutboundUdpports()
	return suo
}

// SetProxy sets the "proxy" field.
func (suo *SubnetUpdateOne) SetProxy(b bool) *SubnetUpdateOne {
	suo.mutation.SetProxy(b)
	return suo
}

// SetNillableProxy sets the "proxy" field if the given value is not nil.
func (suo *SubnetUpdateOne) SetNillableProxy(b *bool) *SubnetUpdateOne {
	if b != nil {
		suo.SetProxy(*b)
	}
	return suo
}

// ClearProxy clears the value of the "proxy" field.
func (suo *SubnetUpdateOne) ClearProxy() *SubnetUpdateOne {
	suo.mutation.ClearProxy()
	return suo
}

// AddHostIDs adds the "hosts" edge to the Device entity by IDs.
func (suo *SubnetUpdateOne) AddHostIDs(ids ...xid.ID) *SubnetUpdateOne {
	suo.mutation.AddHostIDs(ids...)
	return suo
}

// AddHosts adds the "hosts" edges to the Device entity.
func (suo *SubnetUpdateOne) AddHosts(d ...*Device) *SubnetUpdateOne {
	ids := make([]xid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return suo.AddHostIDs(ids...)
}

// Mutation returns the SubnetMutation object of the builder.
func (suo *SubnetUpdateOne) Mutation() *SubnetMutation {
	return suo.mutation
}

// ClearHosts clears all "hosts" edges to the Device entity.
func (suo *SubnetUpdateOne) ClearHosts() *SubnetUpdateOne {
	suo.mutation.ClearHosts()
	return suo
}

// RemoveHostIDs removes the "hosts" edge to Device entities by IDs.
func (suo *SubnetUpdateOne) RemoveHostIDs(ids ...xid.ID) *SubnetUpdateOne {
	suo.mutation.RemoveHostIDs(ids...)
	return suo
}

// RemoveHosts removes "hosts" edges to Device entities.
func (suo *SubnetUpdateOne) RemoveHosts(d ...*Device) *SubnetUpdateOne {
	ids := make([]xid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return suo.RemoveHostIDs(ids...)
}

// Where appends a list predicates to the SubnetUpdate builder.
func (suo *SubnetUpdateOne) Where(ps ...predicate.Subnet) *SubnetUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubnetUpdateOne) Select(field string, fields ...string) *SubnetUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subnet entity.
func (suo *SubnetUpdateOne) Save(ctx context.Context) (*Subnet, error) {
	return withHooks[*Subnet, SubnetMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubnetUpdateOne) SaveX(ctx context.Context) *Subnet {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubnetUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubnetUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SubnetUpdateOne) sqlSave(ctx context.Context) (_node *Subnet, err error) {
	_spec := sqlgraph.NewUpdateSpec(subnet.Table, subnet.Columns, sqlgraph.NewFieldSpec(subnet.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subnet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subnet.FieldID)
		for _, f := range fields {
			if !subnet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subnet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Cidr(); ok {
		_spec.SetField(subnet.FieldCidr, field.TypeString, value)
	}
	if value, ok := suo.mutation.Mask(); ok {
		_spec.SetField(subnet.FieldMask, field.TypeBytes, value)
	}
	if suo.mutation.MaskCleared() {
		_spec.ClearField(subnet.FieldMask, field.TypeBytes)
	}
	if value, ok := suo.mutation.OutboundTcpports(); ok {
		_spec.SetField(subnet.FieldOutboundTcpports, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedOutboundTcpports(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subnet.FieldOutboundTcpports, value)
		})
	}
	if suo.mutation.OutboundTcpportsCleared() {
		_spec.ClearField(subnet.FieldOutboundTcpports, field.TypeJSON)
	}
	if value, ok := suo.mutation.OutboundUdpports(); ok {
		_spec.SetField(subnet.FieldOutboundUdpports, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedOutboundUdpports(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subnet.FieldOutboundUdpports, value)
		})
	}
	if suo.mutation.OutboundUdpportsCleared() {
		_spec.ClearField(subnet.FieldOutboundUdpports, field.TypeJSON)
	}
	if value, ok := suo.mutation.Proxy(); ok {
		_spec.SetField(subnet.FieldProxy, field.TypeBool, value)
	}
	if suo.mutation.ProxyCleared() {
		_spec.ClearField(subnet.FieldProxy, field.TypeBool)
	}
	if suo.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subnet.HostsTable,
			Columns: subnet.HostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: device.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedHostsIDs(); len(nodes) > 0 && !suo.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subnet.HostsTable,
			Columns: subnet.HostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.HostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subnet.HostsTable,
			Columns: subnet.HostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subnet{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subnet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
