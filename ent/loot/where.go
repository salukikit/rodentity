// Code generated by ent, DO NOT EDIT.

package loot

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
	"github.com/salukikit/rodentity/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Loot {
	return predicate.Loot(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Loot {
	return predicate.Loot(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Loot {
	return predicate.Loot(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Loot {
	return predicate.Loot(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Loot {
	return predicate.Loot(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Loot {
	return predicate.Loot(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Loot {
	return predicate.Loot(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Loot {
	return predicate.Loot(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Loot {
	return predicate.Loot(sql.FieldLTE(FieldID, id))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Loot {
	return predicate.Loot(sql.FieldEQ(FieldLocation, v))
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v []byte) predicate.Loot {
	return predicate.Loot(sql.FieldEQ(FieldData, v))
}

// Collectedon applies equality check predicate on the "collectedon" field. It's identical to CollectedonEQ.
func Collectedon(v time.Time) predicate.Loot {
	return predicate.Loot(sql.FieldEQ(FieldCollectedon, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Loot {
	return predicate.Loot(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Loot {
	return predicate.Loot(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Loot {
	return predicate.Loot(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Loot {
	return predicate.Loot(sql.FieldNotIn(FieldType, vs...))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Loot {
	return predicate.Loot(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Loot {
	return predicate.Loot(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Loot {
	return predicate.Loot(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Loot {
	return predicate.Loot(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Loot {
	return predicate.Loot(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Loot {
	return predicate.Loot(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Loot {
	return predicate.Loot(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Loot {
	return predicate.Loot(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Loot {
	return predicate.Loot(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Loot {
	return predicate.Loot(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Loot {
	return predicate.Loot(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Loot {
	return predicate.Loot(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Loot {
	return predicate.Loot(sql.FieldContainsFold(FieldLocation, v))
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v []byte) predicate.Loot {
	return predicate.Loot(sql.FieldEQ(FieldData, v))
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v []byte) predicate.Loot {
	return predicate.Loot(sql.FieldNEQ(FieldData, v))
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...[]byte) predicate.Loot {
	return predicate.Loot(sql.FieldIn(FieldData, vs...))
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...[]byte) predicate.Loot {
	return predicate.Loot(sql.FieldNotIn(FieldData, vs...))
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v []byte) predicate.Loot {
	return predicate.Loot(sql.FieldGT(FieldData, v))
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v []byte) predicate.Loot {
	return predicate.Loot(sql.FieldGTE(FieldData, v))
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v []byte) predicate.Loot {
	return predicate.Loot(sql.FieldLT(FieldData, v))
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v []byte) predicate.Loot {
	return predicate.Loot(sql.FieldLTE(FieldData, v))
}

// CollectedonEQ applies the EQ predicate on the "collectedon" field.
func CollectedonEQ(v time.Time) predicate.Loot {
	return predicate.Loot(sql.FieldEQ(FieldCollectedon, v))
}

// CollectedonNEQ applies the NEQ predicate on the "collectedon" field.
func CollectedonNEQ(v time.Time) predicate.Loot {
	return predicate.Loot(sql.FieldNEQ(FieldCollectedon, v))
}

// CollectedonIn applies the In predicate on the "collectedon" field.
func CollectedonIn(vs ...time.Time) predicate.Loot {
	return predicate.Loot(sql.FieldIn(FieldCollectedon, vs...))
}

// CollectedonNotIn applies the NotIn predicate on the "collectedon" field.
func CollectedonNotIn(vs ...time.Time) predicate.Loot {
	return predicate.Loot(sql.FieldNotIn(FieldCollectedon, vs...))
}

// CollectedonGT applies the GT predicate on the "collectedon" field.
func CollectedonGT(v time.Time) predicate.Loot {
	return predicate.Loot(sql.FieldGT(FieldCollectedon, v))
}

// CollectedonGTE applies the GTE predicate on the "collectedon" field.
func CollectedonGTE(v time.Time) predicate.Loot {
	return predicate.Loot(sql.FieldGTE(FieldCollectedon, v))
}

// CollectedonLT applies the LT predicate on the "collectedon" field.
func CollectedonLT(v time.Time) predicate.Loot {
	return predicate.Loot(sql.FieldLT(FieldCollectedon, v))
}

// CollectedonLTE applies the LTE predicate on the "collectedon" field.
func CollectedonLTE(v time.Time) predicate.Loot {
	return predicate.Loot(sql.FieldLTE(FieldCollectedon, v))
}

// HasRodent applies the HasEdge predicate on the "rodent" edge.
func HasRodent() predicate.Loot {
	return predicate.Loot(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RodentTable, RodentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRodentWith applies the HasEdge predicate on the "rodent" edge with a given conditions (other predicates).
func HasRodentWith(preds ...predicate.Rodent) predicate.Loot {
	return predicate.Loot(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RodentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RodentTable, RodentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.Loot {
	return predicate.Loot(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.Loot {
	return predicate.Loot(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TaskInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Loot) predicate.Loot {
	return predicate.Loot(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Loot) predicate.Loot {
	return predicate.Loot(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Loot) predicate.Loot {
	return predicate.Loot(func(s *sql.Selector) {
		p(s.Not())
	})
}
