// Code generated by ent, DO NOT EDIT.

package loot

import (
	"fmt"
)

const (
	// Label holds the string label denoting the loot type in the database.
	Label = "loot"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// FieldCollectedon holds the string denoting the collectedon field in the database.
	FieldCollectedon = "collectedon"
	// EdgeRodent holds the string denoting the rodent edge name in mutations.
	EdgeRodent = "rodent"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// Table holds the table name of the loot in the database.
	Table = "loots"
	// RodentTable is the table that holds the rodent relation/edge.
	RodentTable = "loots"
	// RodentInverseTable is the table name for the Rodent entity.
	// It exists in this package in order to avoid circular dependency with the "rodent" package.
	RodentInverseTable = "rodents"
	// RodentColumn is the table column denoting the rodent relation/edge.
	RodentColumn = "rodent_loot"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "loots"
	// TaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TaskInverseTable = "tasks"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "task_loot"
)

// Columns holds all SQL columns for loot fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldLocation,
	FieldData,
	FieldCollectedon,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "loots"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"rodent_loot",
	"task_loot",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLocation holds the default value on creation for the "location" field.
	DefaultLocation string
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeCred      Type = "cred"
	TypeKey       Type = "key"
	TypeCert      Type = "cert"
	TypeEnum      Type = "enum"
	TypeObjective Type = "objective"
	TypePii       Type = "pii"
	TypeOther     Type = "other"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeCred, TypeKey, TypeCert, TypeEnum, TypeObjective, TypePii, TypeOther:
		return nil
	default:
		return fmt.Errorf("loot: invalid enum value for type field: %q", _type)
	}
}
