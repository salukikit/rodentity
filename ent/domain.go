// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
	"github.com/salukikit/rodentity/ent/domain"
)

// Domain is the model entity for the Domain schema.
type Domain struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// AD holds the value of the "AD" field.
	AD bool `json:"AD,omitempty"`
	// Owned holds the value of the "owned" field.
	Owned bool `json:"owned,omitempty"`
	// Cloud holds the value of the "cloud" field.
	Cloud string `json:"cloud,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DomainQuery when eager-loading is set.
	Edges               DomainEdges `json:"edges"`
	domain_childdomains *xid.ID
}

// DomainEdges holds the relations/edges for other nodes in the graph.
type DomainEdges struct {
	// Devices holds the value of the devices edge.
	Devices []*Device `json:"devices,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Groups holds the value of the groups edge.
	Groups []*Group `json:"groups,omitempty"`
	// Childdomains holds the value of the childdomains edge.
	Childdomains []*Domain `json:"childdomains,omitempty"`
	// Parentdomain holds the value of the parentdomain edge.
	Parentdomain *Domain `json:"parentdomain,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// DevicesOrErr returns the Devices value or an error if the edge
// was not loaded in eager-loading.
func (e DomainEdges) DevicesOrErr() ([]*Device, error) {
	if e.loadedTypes[0] {
		return e.Devices, nil
	}
	return nil, &NotLoadedError{edge: "devices"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e DomainEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e DomainEdges) GroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[2] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// ChilddomainsOrErr returns the Childdomains value or an error if the edge
// was not loaded in eager-loading.
func (e DomainEdges) ChilddomainsOrErr() ([]*Domain, error) {
	if e.loadedTypes[3] {
		return e.Childdomains, nil
	}
	return nil, &NotLoadedError{edge: "childdomains"}
}

// ParentdomainOrErr returns the Parentdomain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DomainEdges) ParentdomainOrErr() (*Domain, error) {
	if e.loadedTypes[4] {
		if e.Parentdomain == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: domain.Label}
		}
		return e.Parentdomain, nil
	}
	return nil, &NotLoadedError{edge: "parentdomain"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Domain) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case domain.FieldAD, domain.FieldOwned:
			values[i] = new(sql.NullBool)
		case domain.FieldName, domain.FieldCloud:
			values[i] = new(sql.NullString)
		case domain.FieldID:
			values[i] = new(xid.ID)
		case domain.ForeignKeys[0]: // domain_childdomains
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Domain", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Domain fields.
func (d *Domain) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case domain.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case domain.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case domain.FieldAD:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field AD", values[i])
			} else if value.Valid {
				d.AD = value.Bool
			}
		case domain.FieldOwned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field owned", values[i])
			} else if value.Valid {
				d.Owned = value.Bool
			}
		case domain.FieldCloud:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cloud", values[i])
			} else if value.Valid {
				d.Cloud = value.String
			}
		case domain.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field domain_childdomains", values[i])
			} else if value.Valid {
				d.domain_childdomains = new(xid.ID)
				*d.domain_childdomains = *value.S.(*xid.ID)
			}
		}
	}
	return nil
}

// QueryDevices queries the "devices" edge of the Domain entity.
func (d *Domain) QueryDevices() *DeviceQuery {
	return NewDomainClient(d.config).QueryDevices(d)
}

// QueryUsers queries the "users" edge of the Domain entity.
func (d *Domain) QueryUsers() *UserQuery {
	return NewDomainClient(d.config).QueryUsers(d)
}

// QueryGroups queries the "groups" edge of the Domain entity.
func (d *Domain) QueryGroups() *GroupQuery {
	return NewDomainClient(d.config).QueryGroups(d)
}

// QueryChilddomains queries the "childdomains" edge of the Domain entity.
func (d *Domain) QueryChilddomains() *DomainQuery {
	return NewDomainClient(d.config).QueryChilddomains(d)
}

// QueryParentdomain queries the "parentdomain" edge of the Domain entity.
func (d *Domain) QueryParentdomain() *DomainQuery {
	return NewDomainClient(d.config).QueryParentdomain(d)
}

// Update returns a builder for updating this Domain.
// Note that you need to call Domain.Unwrap() before calling this method if this Domain
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Domain) Update() *DomainUpdateOne {
	return NewDomainClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Domain entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Domain) Unwrap() *Domain {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Domain is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Domain) String() string {
	var builder strings.Builder
	builder.WriteString("Domain(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("AD=")
	builder.WriteString(fmt.Sprintf("%v", d.AD))
	builder.WriteString(", ")
	builder.WriteString("owned=")
	builder.WriteString(fmt.Sprintf("%v", d.Owned))
	builder.WriteString(", ")
	builder.WriteString("cloud=")
	builder.WriteString(d.Cloud)
	builder.WriteByte(')')
	return builder.String()
}

// Domains is a parsable slice of Domain.
type Domains []*Domain
